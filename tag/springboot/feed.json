{
    "version": "https://jsonfeed.org/version/1",
    "title": "Sycamore's Blog • All posts by \"springboot\" tag",
    "description": "",
    "home_page_url": "https://www.sycamore.top",
    "items": [
        {
            "id": "https://www.sycamore.top/Diary/2023-12-4/",
            "url": "https://www.sycamore.top/Diary/2023-12-4/",
            "title": "实习半月总结",
            "date_published": "2023-12-06T03:05:53.000Z",
            "content_html": "<p>在杭州某公司 <code>springboot</code>  后端开发岗干了半个月，发现了很多不足，以及一些值得记录的地方。</p>\n<hr />\n<p>我在入职的时候，其实在 <code>springboot</code>  方面是算是个小白，只懂一点基础知识，甚至 mybatis 框架都没有上手用过...</p>\n<p>先是尝试自己照着模板写，然后看同事的代码修改，现在勉强算是熟练掌握基本的增删改查的接口编写了。</p>\n<p>但是，我总是能发现一些新的写法，更加方便更加灵活，但应该对应不同的应用场景，也应该相互结合使用。</p>\n<h2 id=\"最开始\"><a class=\"anchor\" href=\"#最开始\">#</a> 最开始</h2>\n<p>最开始，我学会使用 <code>Mybatis</code>  写增删改查，</p>\n<p>在 <code>.xml</code>  文件中写 <code>sql</code>  语句：</p>\n<p><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;function_name&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;java.util.Map&quot;</span>&gt;</span></span><br><span class=\"line\">    select * from table_name</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>或者直接在 <code>DAO</code>  层在函数名上方用 <code>@...</code>  注解：</p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Select(&quot;select * from table_name&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"><span class=\"meta\">@Insert(&quot;insert into table_name (id, field_name) values (#&#123;id&#125;, #&#123;function_variable_name&#125;)&quot;)</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"然后\"><a class=\"anchor\" href=\"#然后\">#</a> 然后</h2>\n<p>然后，我知道了 <code>MyBatis-Plus</code> ，</p>\n<p>可以继承通用 Service 层 <code>IService</code>  和通用 Mapper 层 <code>BaseMapper</code> ，它们集成了相当一部分可用的增删改查函数，直接调用就行，不用写 <code>sql</code>  语句：</p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ServiceName</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">IService</span>&lt;EntityName&gt; &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ServiceImplName</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ServiceImpl</span>&lt;DaoName, EntityName&gt;</span><br><span class=\"line\">        <span class=\"keyword\">implements</span> <span class=\"title class_\">ServiceName</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">// and</span></span><br><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">DaoName</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BaseMapper</span>&lt;EntityName&gt; &#123;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>当然，查询中还是要用 <code>QueryWrapper</code>  构建查询语句的：</p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QueryWrapper&lt;EntityName&gt; queryWrapper = <span class=\"keyword\">new</span> <span class=\"title class_\">QueryWrapper</span>&lt;&gt;();</span><br><span class=\"line\">queryWrapper.eq(String column, Object val);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"现在\"><a class=\"anchor\" href=\"#现在\">#</a> 现在</h2>\n<p>现在，我知道可以将二者结合使用。</p>\n<p>业务逻辑极其简单的时候（比如只需要对多个表查询数据），直接用 xml 或者注解写。</p>\n<p>需要实现增删改查的时候，继承 <code>MyBatis-Plus</code>  的通用类。</p>\n<p>如果有其他需要实现的函数，在通用类的基础上增加：</p>\n<ul>\n<li>在 <code>Service</code>  层增加对应的函数</li>\n<li>涉及到与数据库的交互时，在 <code>Dao</code>  层增加函数</li>\n</ul>\n<hr />\n<p>除此之外，还学了些零碎的东西：</p>\n<ul>\n<li>\n<p>常量、公共函数，在 <code>Common...</code>  的函数里面写好，然后在用到的时候调用</p>\n</li>\n<li>\n<p><code>utils</code>  下的函数要仔细看看，里面肯定有开发中要用到的工具包。</p>\n<p>比如：接口的返回值类型 <code>Result</code> ，文件上传工具类 <code>FileUpload</code> ，分页工具类 <code>PageUtils</code> ，获取 <code>UserId</code>  的 <code>UserInfoUtil</code> ...</p>\n<p>名字可能有所差别，但功能类似，也不用我们自己实现。</p>\n</li>\n<li>\n<p>...</p>\n</li>\n</ul>\n<p>之后，继续学习吧，希望有一天能写出干净简洁的代码。</p>\n",
            "tags": [
                "springboot",
                "Diary"
            ]
        }
    ]
}